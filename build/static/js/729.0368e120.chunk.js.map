{"version":3,"file":"static/js/729.0368e120.chunk.js","mappings":"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","sources":["components/Common/Table/index.jsx","components/Admin/AddTableTemplate.jsx","components/Common/ErrorPage/InternalServerErrorPage.jsx","components/Common/Form/ListOfValues.jsx","components/Common/Form/PreviewCardContainer/index.jsx","components/Common/Form/Form.jsx","components/Common/Form/PreviewCardContainer/TemplateCard/index.jsx","components/Common/Modal/index.jsx"],"sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTable, usePagination } from 'react-table'\nimport './index.scss'\nimport InputBox from '../Form/InputBox'\n\n// Let's add a fetchData method to our Table component that will be used to fetch\n// new data when pagination state changes\n// We can also add a loading state to let our table know it's loading new data\nfunction Table({\n    columns,\n    data,\n    fetchData,\n    loading,\n    pageCount: controlledPageCount,\n}) {\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        prepareRow,\n        page,\n        canPreviousPage,\n        canNextPage,\n        pageOptions,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        state: { pageIndex, pageSize },\n    } = useTable(\n        {\n            columns,\n            data,\n            initialState: { pageIndex: 0 },\n            manualPagination: true,\n            pageCount: controlledPageCount,\n        },\n        usePagination,\n    )\n\n    const [searchText, setSearchText] = useState('')\n\n    // Listen for changes in pagination and use the state to fetch our new data\n    React.useEffect(() => {\n        fetchData({ pageIndex, pageSize, searchText })\n    }, [fetchData, pageIndex, pageSize, searchText])\n\n    // Render the UI for your table\n    return (\n        <div className=\"admin-table\">\n            <InputBox\n                darkTheme={true}\n                type=\"text\"\n                placeholder=\"Search...\"\n                divClassNames=\"my-3\"\n                value={searchText}\n                onChange={(evt) => {\n                    setSearchText(evt?.target?.value)\n                }}\n            />\n            <table\n                {...getTableProps()}\n                className=\"table table-striped table-dark table-sm table-bordered table-responsive\"\n            >\n                <thead>\n                    {headerGroups.map((headerGroup, headerGroupIdx) => (\n                        <tr\n                            key={headerGroupIdx}\n                            {...headerGroup.getHeaderGroupProps()}\n                        >\n                            {headerGroup.headers.map((column, columnIndex) => (\n                                <th\n                                    key={columnIndex}\n                                    {...column.getHeaderProps()}\n                                >\n                                    {column.render('Header')}\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {page.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()} key={i}>\n                                {row.cells.map((cell, cellIndex) => {\n                                    return (\n                                        <td\n                                            {...cell.getCellProps()}\n                                            key={cellIndex + i * 100}\n                                        >\n                                            {cell.render('Cell')}\n                                        </td>\n                                    )\n                                })}\n                            </tr>\n                        )\n                    })}\n                    <tr>\n                        {loading ? (\n                            // Use our custom loading state to show a loading indicator\n                            <td colSpan=\"10000\">Loading...</td>\n                        ) : (\n                            <td colSpan=\"10000\">\n                                Showing {page.length} of ~\n                                {controlledPageCount * pageSize} results\n                            </td>\n                        )}\n                    </tr>\n                </tbody>\n            </table>\n\n            <div className=\"custom-pagination\">\n                <div>\n                    <button\n                        onClick={() => gotoPage(0)}\n                        disabled={!canPreviousPage}\n                        className=\"page-button\"\n                    >\n                        {'<<'}\n                    </button>\n                    <button\n                        onClick={() => previousPage()}\n                        disabled={!canPreviousPage}\n                        className=\"page-button\"\n                    >\n                        {'<'}\n                    </button>\n                    <button\n                        onClick={() => nextPage()}\n                        disabled={!canNextPage}\n                        className=\"page-button\"\n                    >\n                        {'>'}\n                    </button>\n                    <button\n                        onClick={() => gotoPage(pageCount - 1)}\n                        disabled={!canNextPage}\n                        className=\"page-button\"\n                    >\n                        {'>>'}\n                    </button>\n                </div>\n                <div>\n                    <span>\n                        Page\n                        <strong>\n                            {pageIndex + 1} of {pageOptions.length}\n                        </strong>\n                    </span>\n                    <span>\n                        {'   '}| Go to page:{'   '}\n                        <input\n                            type=\"number\"\n                            defaultValue={pageIndex + 1}\n                            onChange={(e) => {\n                                const page = e.target.value\n                                    ? Number(e.target.value) - 1\n                                    : 0\n                                gotoPage(page)\n                            }}\n                            style={{ width: '100px' }}\n                        />\n                    </span>{' '}\n                    <select\n                        value={pageSize}\n                        onChange={(e) => {\n                            setPageSize(Number(e.target.value))\n                        }}\n                    >\n                        {[10, 20, 30, 40, 50].map((pageSize) => (\n                            <option key={pageSize} value={pageSize}>\n                                Show {pageSize}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nTable.propTypes = {\n    columns: PropTypes.array,\n    data: PropTypes.array,\n    fetchData: PropTypes.func,\n    loading: PropTypes.bool,\n    pageCount: PropTypes.number,\n}\n\nexport default Table\n","import React, { useState } from 'react'\nimport axios from '../../store/axios-secure'\nimport PropTypes from 'prop-types'\nimport Form from '../Common/Form/Form'\nimport Table from '../Common/Table'\nimport Modal from '../Common/Modal'\nimport Loader from '../Common/Loader'\nimport Button from '../Common/Button'\nimport ErrorPage from '../Common/ErrorPage/InternalServerErrorPage'\n\nconst AddTableTemplate = ({\n    productForm,\n    updateForm,\n    tableDetails = [],\n    fetchURL,\n    postURL,\n    updateURL,\n    deleteURL,\n    formName,\n}) => {\n    const [defaultValues, setDefaultValues] = useState([])\n    const [showModalUpdate, setShowModalUpdate] = useState(false)\n    const [showModalAdd, setShowModalAdd] = useState(false)\n    const [data, setData] = React.useState([])\n    const [loading, setLoading] = React.useState(false)\n    const [error, setError] = React.useState(false)\n    const [pageCount, setPageCount] = React.useState(0)\n    const fetchIdRef = React.useRef(0)\n\n    const fetchData = React.useCallback(\n        async ({ pageSize, pageIndex, searchText }) => {\n            try {\n                const fetchId = ++fetchIdRef.current\n\n                // Set the loading state\n                // setLoading(true)\n\n                if (fetchId === fetchIdRef.current) {\n                    const response = await axios.get(\n                        `${fetchURL}?pageNo=${\n                            pageIndex + 1\n                        }&pageSize=${pageSize}&searchText=${searchText}`,\n                    )\n\n                    const content = response?.data?.content.map((row) => {\n                        return {\n                            ...row,\n                            editButton: (\n                                <span\n                                    onClick={() => {\n                                        editRow(row)\n                                    }}\n                                >\n                                    Edit Icon\n                                </span>\n                            ),\n                            deleteButton: (\n                                <span\n                                    onClick={() => {\n                                        deleteRow(row)\n                                    }}\n                                >\n                                    Delete Icon\n                                </span>\n                            ),\n                        }\n                    })\n\n                    const totalPages = response?.data?.totalPages\n\n                    setData(content)\n                    setPageCount(totalPages)\n                    setLoading(false)\n                }\n            } catch (err) {\n                setError(true)\n            }\n        },\n        [],\n    )\n\n    // TOOD update Data, also for edit has to use new data\n    const updateData = () => {\n        setShowModalUpdate(false)\n        // const submittedData = param?.data\n        // const updatedData = data?.map((d) => {\n        //     if (parseInt(d.id) === parseInt(submittedData?.id))\n        //         return { ...d, ...submittedData }\n        //     else return d\n        // })\n        // setData(updatedData)\n    }\n\n    const editRow = (row) => {\n        setDefaultValues(row)\n        setShowModalUpdate(true)\n    }\n\n    // TODO Error on that row instead of full screen error\n    const deleteRow = async (row) => {\n        try {\n            await axios.delete(deleteURL + '/' + row.id)\n        } catch (err) {\n            setError(true)\n        }\n        alert('Deleted')\n    }\n\n    const columns = React.useMemo(\n        () =>\n            tableDetails.map((form) => {\n                if (form.render) {\n                    return {\n                        Header: form.placeholder,\n                        accessor: form.fieldName,\n                        Cell: form.render,\n                    }\n                } else\n                    return {\n                        Header: form.placeholder,\n                        accessor: form.fieldName,\n                    }\n            }),\n        [],\n    )\n\n    const displayData = (\n        <div className=\"container-lg mb-5\">\n            <Button\n                classNames=\"w-mc mt-4\"\n                color=\"green\"\n                text={`Add ${formName}`}\n                onClick={() => setShowModalAdd(true)}\n            />\n\n            <Table\n                columns={columns}\n                data={data}\n                fetchData={fetchData}\n                loading={loading}\n                pageCount={pageCount}\n            />\n\n            <Modal show={showModalAdd} onHide={() => setShowModalAdd(false)}>\n                <Form\n                    darkTheme={true}\n                    formDetails={productForm}\n                    formName={formName}\n                    postUrl={postURL}\n                    requestType=\"post\"\n                    callback={() => setShowModalAdd(false)}\n                />\n            </Modal>\n\n            <Modal\n                show={showModalUpdate}\n                onHide={() => setShowModalUpdate(false)}\n                title={formName}\n            >\n                <Form\n                    darkTheme={true}\n                    formDetails={updateForm}\n                    formName={formName}\n                    postUrl={updateURL}\n                    requestType=\"put\"\n                    defaultValues={defaultValues}\n                    callback={updateData}\n                />\n            </Modal>\n        </div>\n    )\n\n    return loading ? <Loader /> : error ? <ErrorPage /> : displayData\n}\n\nAddTableTemplate.propTypes = {\n    productForm: PropTypes.array,\n    updateForm: PropTypes.array,\n    tableDetails: PropTypes.array,\n    fetchURL: PropTypes.string,\n    postURL: PropTypes.string,\n    updateURL: PropTypes.string,\n    deleteURL: PropTypes.string,\n    formName: PropTypes.string,\n}\n\nexport default AddTableTemplate\n","import React from 'react'\nimport ErrorPage from './index'\nimport './index.scss'\n\nconst InternalServerErrorPage = () => {\n    return <ErrorPage errorType={'500'} />\n}\n\nexport default InternalServerErrorPage\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport InputBox from './InputBox'\nimport DynamicDropdown from './DynamicDropdown'\n\nconst ListOfValues = ({\n    darkTheme = false,\n    register,\n    control,\n    helper,\n    fieldKey,\n    subFields,\n    placeholder,\n    size,\n}) => {\n    const [indexes, setIndexes] = useState([])\n    const [counter, setCounter] = useState(0)\n\n    const addRow = () => {\n        setIndexes((prevIndexes) => [...prevIndexes, counter])\n        setCounter((prevCounter) => prevCounter + 1)\n    }\n\n    const clearRows = () => {\n        setIndexes([])\n        setCounter(0)\n    }\n\n    useEffect(() => {\n        let indexList = []\n        let count = 0\n        for (let index = 0; index < size; index++) {\n            indexList.push(index)\n            count++\n        }\n        setIndexes(indexList)\n        setCounter(count)\n    }, [])\n\n    return (\n        <>\n            <div className=\"row\">\n                {indexes.map((index, k) => {\n                    const fieldName = `${fieldKey}[${index}]`\n\n                    return (\n                        <div key={k} className=\"col-md-6\">\n                            <fieldset name={fieldName} key={fieldName}>\n                                {subFields.map((value, idx) => {\n                                    if (value.type === 'dynamic-dropdown') {\n                                        return (\n                                            <DynamicDropdown\n                                                defaultOptions={value.options}\n                                                name={`${fieldName}.${value.fieldName}`}\n                                                // errorClassName={\n                                                //     errors[value.fieldName]\n                                                //         ? 'is-invalid'\n                                                //         : ''\n                                                // }\n                                                control={control}\n                                                multi={value.multi}\n                                                canCreate={value.canCreate}\n                                            />\n                                        )\n                                    } else {\n                                        return (\n                                            <div key={idx} className=\"p-2\">\n                                                <InputBox\n                                                    label={value.label}\n                                                    type={value.type}\n                                                    placeholder={\n                                                        value.placeholder\n                                                    }\n                                                    name={`${fieldName}.${value.fieldName}`}\n                                                    refValue={register({\n                                                        required:\n                                                            value.required,\n                                                        ...value?.validation,\n                                                    })}\n                                                    id={value.id}\n                                                    readOnly={value.disabled}\n                                                    labelClass={\n                                                        value.labelClass\n                                                    }\n                                                    inputLabel={\n                                                        value.inputLabel\n                                                    }\n                                                    divClassNames={\n                                                        value.divClassNames\n                                                    }\n                                                    darkTheme={darkTheme}\n                                                    inputClassNames={\n                                                        value.inputClassNames\n                                                    }\n                                                />\n                                            </div>\n                                        )\n                                    }\n                                })}\n                            </fieldset>\n                        </div>\n                    )\n                })}\n            </div>\n            <button\n                type=\"button\"\n                className=\"m-1 btn btn-primary small-btn p-2\"\n                onClick={addRow}\n            >\n                Add {placeholder}\n            </button>\n            <button\n                type=\"button\"\n                className=\"m-1 btn btn-danger small-btn p-2\"\n                onClick={clearRows}\n            >\n                Clear {placeholder}\n            </button>\n            <small className=\"form-text text-muted\">{helper}</small>\n        </>\n    )\n}\n\nListOfValues.propTypes = {\n    darkTheme: PropTypes.bool,\n    register: PropTypes.func,\n    control: PropTypes.func,\n    helper: PropTypes.string,\n    fieldKey: PropTypes.string,\n    subFields: PropTypes.object,\n    placeholder: PropTypes.string,\n    size: PropTypes.number,\n}\n\nexport default ListOfValues\n","import React from 'react'\nimport './index.scss'\nimport PreviewCard from './PreviewCard'\nimport TemplateCard from './TemplateCard'\n\nconst TempCard1 =\n    'https://storage.googleapis.com/evolv-mobile/trainers/swadhintrainer.png'\n\nconst TempCard2 =\n    'https://storage.googleapis.com/evolv-mobile/trainers/anasmithtrainer.png'\nconst PreviewCardContainer = ({ props, register, setValue }) => {\n    return (\n        <div className=\"preview-container\">\n            <div className=\"col-md-7 preview-container-left\">\n                <h3 className=\"heading\">Template Cards</h3>\n                <div className=\"template-cards-container\">\n                    <TemplateCard\n                        name=\"Swadhin Saraf\"\n                        imgUrl={TempCard1}\n                        peopleTrained={204}\n                        tagline=\"INFS Certified\"\n                        colorIndex={8}\n                    />\n                    <TemplateCard\n                        name=\"Ana Smith\"\n                        imgUrl={TempCard2}\n                        peopleTrained={285}\n                        tagline=\"Fat Loss Expert\"\n                        colorIndex={5}\n                    />\n                    {/* <img src={TempCard1} alt=\"no-image\" />\n                    <img src={TempCard2} alt=\"no-image\" /> */}\n                </div>\n            </div>\n            <div className=\"col-md-5 preview-container-right\">\n                <h3 className=\"heading\">Your Card</h3>\n                <div className=\"template-cards-container\">\n                    <PreviewCard\n                        register={register}\n                        setValue={setValue}\n                        idx={props.color}\n                        value={props}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PreviewCardContainer\n","import React, { useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport PropTypes from 'prop-types'\nimport axios from '../../../store/axios-secure'\nimport ListOfValues from './ListOfValues'\nimport Loader from '../../Common/Loader'\nimport ErrorPage from '../../Common/ErrorPage/InternalServerErrorPage'\nimport Button from '../Button'\nimport InputBox from './InputBox'\nimport TextArea from './TextArea'\nimport StarRating from '../StarRating'\nimport DynamicDropdown from './DynamicDropdown'\nimport GenderSelection from './GenderSelection'\nimport UploadFileButton from './UploadFileButton'\nimport './index.scss'\nimport ColorSelector from './ColorSelector'\nimport { Transformations } from './Transformations'\nimport PreviewCardContainer from './PreviewCardContainer'\nimport DatePickerComponent from './DatePicker'\n\nconst Form = ({\n    formDetails,\n    postUrl,\n    formName,\n    formIcon,\n    showTitle = true,\n    darkTheme = false,\n    defaultValues,\n    requestType = 'post',\n    saveButtonText,\n    classNames = '',\n    saveForLater = false,\n    previewCard = false,\n    transformations,\n    setTransformations,\n    callback = () => {},\n    modifier = (data) => {\n        return data\n    },\n}) => {\n    const [isLoading, setIsLoading] = useState(false)\n    const [isError, setIsError] = useState(false)\n    const [error, setError] = useState()\n    const [submittedData, setSubmittedData] = useState({})\n    const getDefaultForm = () => {\n        // console.log(defaultValues)\n\n        let defaultKeyValues = {}\n\n        if (defaultValues) {\n            // console.log(defaultValues)\n            // Unflatten list\n            Object.values(formDetails).forEach((value) => {\n                const keyName = value.idFieldName\n                    ? value.idFieldName\n                    : value.fieldName\n\n                if (value.type === 'flatlist') {\n                    defaultKeyValues[value.fieldName] = defaultValues[\n                        keyName\n                    ].map((v) => {\n                        return {\n                            [value.subFields[0].fieldName]: v,\n                        }\n                    })\n                } else if (\n                    value.type === 'dynamic-dropdown' &&\n                    value.multi &&\n                    defaultValues[keyName].length > 0 &&\n                    typeof defaultValues[keyName][0] === 'object'\n                ) {\n                    defaultKeyValues[value.fieldName] = defaultValues[\n                        keyName\n                    ].map((value) => value.id)\n                } else {\n                    defaultKeyValues[value.fieldName] = defaultValues[keyName]\n                }\n            })\n\n            return defaultKeyValues\n        }\n\n        formDetails.forEach((value) => {\n            if (value.type === 'checkbox') {\n                defaultKeyValues[value.fieldName] = false\n            } else {\n                defaultKeyValues[value.fieldName] = ''\n            }\n        })\n\n        return defaultKeyValues\n    }\n\n    const textColour = darkTheme ? 'text-white' : 'text-black'\n\n    const {\n        register,\n        handleSubmit,\n        control,\n        errors,\n        reset,\n        setValue,\n        getValues,\n        watch,\n        formState: { isSubmitSuccessful },\n    } = useForm({\n        defaultValues: getDefaultForm(),\n    })\n    const allFields = watch()\n    console.log(allFields)\n    useEffect(() => {\n        if (isSubmitSuccessful) {\n            reset(getDefaultForm())\n        }\n    }, [isSubmitSuccessful, submittedData, reset])\n    useEffect(() => {\n        if (allFields?.phoneNumber?.length > 10) {\n            setValue('phoneNumber', allFields?.phoneNumber?.slice(0, 10))\n        }\n        if (allFields?.experience?.length > 2) {\n            setValue('experience', allFields?.experience?.slice(0, 2))\n        }\n        if (allFields?.tagline?.length > 20) {\n            setValue('phoneNumber', allFields?.tagline?.slice(0, 20))\n        }\n        if (allFields?.peopleTrained?.length > 5) {\n            setValue('peopleTrained', allFields?.peopleTrained?.slice(0, 5))\n        }\n    }, [allFields])\n    const onSubmit = async (data) => {\n        await saveData(data)\n        setSubmittedData(data)\n        setIsLoading(false)\n    }\n\n    const saveData = async (dataM) => {\n        setIsLoading(true)\n        // TODO Investigate why Null is there\n        // TODO Remove Button Uncomment\n        // Remove Nulls for list and flatlist\n        const data = await modifier(dataM) //modify form data\n\n        // Object.values(formDetails).forEach((value) => {\n        //     if (value.type === 'flatlist' || value.type === 'list') {\n        //         data[value.fieldName] = data[value.fieldName]?.filter(\n        //             (d) => d !== null,\n        //         )\n        //     }\n        // })\n\n        // // Flatten flatlist\n        // Object.values(formDetails).forEach((value) => {\n        //     if (value.type === 'flatlist') {\n        //         data[value.fieldName] = data[value.fieldName]?.map(\n        //             (v) => v[value.subFields[0].fieldName],\n        //         )\n        //     }\n        // })\n\n        try {\n            if (requestType === 'post') {\n                const response = await axios.post(postUrl, data, {\n                    headers: {\n                        // 'Content-Type': `multipart/form-data; boundary=${data.getBoundary()}`,\n                        'Content-Type': `multipart/form-data;`,\n                    },\n                })\n                // TODO make changes to all the callbacks, like the one below\n                callback(response.data)\n            } else if (requestType === 'put') {\n                const response = await axios.put(postUrl, data)\n                callback({ response: response?.data, data: data })\n            } else if (requestType === 'get') {\n                callback(data)\n            }\n        } catch (err) {\n            setError(err?.response?.data?.message)\n            setIsError(true)\n        }\n    }\n\n    const getFormDetails = () => {\n        const formInputs = formDetails?.map((value, index) => {\n            if (value.type === 'hidden-text') {\n                return (\n                    <input\n                        key={index}\n                        type={'text'}\n                        className={`${\n                            errors[value.fieldName] ? 'is-invalid' : ''\n                        }`}\n                        name={value.fieldName}\n                        ref={register({ required: value.required })}\n                        hidden\n                    />\n                )\n            } else if (value.type === 'list' || value.type === 'flatlist') {\n                let size\n                if (\n                    defaultValues &&\n                    defaultValues[value.fieldName] &&\n                    defaultValues[value.fieldName].length\n                )\n                    size = defaultValues[value.fieldName].length\n                else size = 0\n                return (\n                    <div className={`p-2 ${value.classNames}`} key={index}>\n                        <ListOfValues\n                            darkTheme={darkTheme}\n                            register={register}\n                            control={control}\n                            helper={value.helper}\n                            fieldKey={value.fieldName}\n                            subFields={value.subFields}\n                            placeholder={value.placeholder}\n                            size={size}\n                        />\n                    </div>\n                )\n            } else if (value.type === 'dynamic-dropdown') {\n                return (\n                    <div className={`p-2 ${value.classNames}`} key={index}>\n                        <DynamicDropdown\n                            defaultOptions={value.options}\n                            placeholder={value.placeholder}\n                            name={value.fieldName}\n                            errorClassName={\n                                errors[value.fieldName] ? 'is-invalid' : ''\n                            }\n                            control={control}\n                            multi={value.multi}\n                            canCreate={value.canCreate}\n                            maxOptions={value.maxOptions}\n                            maxCharLength={value.maxCharLength}\n                            required={value.required}\n                            minOptions={value?.minOptions}\n                        />\n\n                        {errors[value.fieldName] && (\n                            <small\n                                id=\"firstNameHelp\"\n                                className=\"form-text text-danger\"\n                            >\n                                {value?.validation?.errorMessage}\n                            </small>\n                        )}\n                        <small\n                            id={value.fieldName + 'Help'}\n                            className=\"form-text text-muted\"\n                        >\n                            {value.helper}\n                        </small>\n                    </div>\n                )\n            } else if (value.type === 'upload-button') {\n                let isRequired = false\n                if (value.required) {\n                    isRequired = true\n                } else if (\n                    // TODO write something better for this\n                    value.requiredDependsOn &&\n                    getValues(value.requiredDependsOn)?.length > 0\n                ) {\n                    isRequired = true\n                }\n\n                return (\n                    <div className={`p-2 ${value.classNames}`} key={index}>\n                        <UploadFileButton\n                            name={value.fieldName}\n                            refValue={register({\n                                required: isRequired,\n                                ...value?.validation,\n                            })}\n                            acceptableFileExtensions={\n                                value.acceptableFileExtensions\n                            }\n                            isError={errors[value.fieldName]}\n                            id={value.fieldName}\n                            buttonText={value?.buttonText}\n                            onChange={value.onChange}\n                            required={value.required}\n                        />\n                    </div>\n                )\n            } else if (value.type === 'gender-selection') {\n                // TODO Move somewhere else, or make it generic\n                return (\n                    <div className={`p-2 ${value.classNames}`} key={index}>\n                        <GenderSelection register={register} />\n                    </div>\n                )\n            } else if (value.type === 'color-selection') {\n                return (\n                    <div className={`p-2 ${value.classNames}`} key={index}>\n                        <ColorSelector\n                            setValue={setValue}\n                            register={register}\n                        />\n                    </div>\n                )\n            } else if (value.type === 'date-picker') {\n                return (\n                    <DatePickerComponent\n                        label={value.label}\n                        classNames={value.classNames}\n                        key={index}\n                        register={register}\n                    />\n                )\n            } else if (value.type === 'transformations') {\n                return (\n                    <Transformations\n                        key={index}\n                        transformations={transformations}\n                        setTransformations={setTransformations}\n                    />\n                )\n            } else if (value.type === 'checkbox') {\n                return (\n                    <div className={`p-2 ${value.classNames}`} key={index}>\n                        <input\n                            type={value.type}\n                            placeholder={value.placeholder}\n                            name={value.fieldName}\n                            ref={register({ required: value.required })}\n                            readOnly={value.disabled}\n                        />\n                        <small\n                            id={value.fieldName + 'Help'}\n                            className=\"form-text text-muted\"\n                        >\n                            {value.helper}\n                        </small>\n                    </div>\n                )\n            } else if (value.type === 'textarea') {\n                return (\n                    <div className={`p-2 ${value.classNames}`} key={index}>\n                        <TextArea\n                            divClassNames={value.divClassNames}\n                            labelClass={value.labelClass}\n                            label={value.label}\n                            name={value.fieldName}\n                            rows=\"4\"\n                            cols=\"50\"\n                            placeholder={value.placeholder}\n                            refValue={register({\n                                required: value.required,\n                                ...value?.validation,\n                            })}\n                            inputClassNames={value.inputClassNames}\n                        />\n                        {errors[value.fieldName] && (\n                            <small\n                                id=\"firstNameHelp\"\n                                className=\"form-text text-danger\"\n                            >\n                                {value?.validation?.errorMessage}\n                            </small>\n                        )}\n                        <small\n                            id={value.fieldName + 'Help'}\n                            className=\"form-text text-muted\"\n                        >\n                            {value.helper}\n                        </small>\n                    </div>\n                )\n            } else if (value.type === 'star-rating') {\n                return (\n                    <div key={index}>\n                        <input\n                            name={value.fieldName}\n                            type=\"hidden\"\n                            ref={register({\n                                required: value.required,\n                                ...value?.validation,\n                            })}\n                        />\n                        <div className={`p-2 ${value.classNames}`} key={index}>\n                            <StarRating\n                                edit={true}\n                                reverse={value.reverse}\n                                size={value.size}\n                                isHalf={false}\n                                star={defaultValues?.star}\n                                showNumber={value.showNumber}\n                                onChange={(data) => {\n                                    setValue(value.fieldName, data)\n                                }}\n                            />\n                            {errors[value.fieldName] && (\n                                <small\n                                    id=\"firstNameHelp\"\n                                    className=\"form-text text-danger\"\n                                >\n                                    {value?.validation?.errorMessage}\n                                </small>\n                            )}\n                        </div>\n                    </div>\n                )\n            } else {\n                return (\n                    <div className={`p-2 ${value.classNames}`} key={index}>\n                        <InputBox\n                            label={value.label}\n                            errorClassName={\n                                errors[value.fieldName] ? 'is-invalid' : ''\n                            }\n                            type={value.type}\n                            placeholder={value.placeholder}\n                            name={value.fieldName}\n                            refValue={register({\n                                required: value.required,\n                                ...value?.validation,\n                            })}\n                            required={value.required}\n                            readOnly={value.disabled}\n                            labelClass={value.labelClass}\n                            inputLabel={value.inputLabel}\n                            divClassNames={value.divClassNames}\n                            darkTheme={darkTheme}\n                            inputClassNames={value.inputClassNames}\n                            maxLength={value.maxLength}\n                        />\n                        {errors[value.fieldName] && (\n                            <small\n                                id=\"firstNameHelp\"\n                                className=\"form-text text-danger\"\n                            >\n                                {value?.validation?.errorMessage}\n                            </small>\n                        )}\n                        <small\n                            id={value.fieldName + 'Help'}\n                            className=\"form-text text-muted\"\n                        >\n                            {value.helper}\n                        </small>\n                    </div>\n                )\n            }\n        })\n\n        return (\n            <>\n                <small className=\"message error\">\n                    All required fields are marked as *\n                </small>\n                <form onSubmit={handleSubmit(onSubmit)} className={classNames}>\n                    <div className=\"row\">\n                        {formInputs}\n                        {previewCard ? (\n                            <PreviewCardContainer\n                                props={allFields}\n                                register={register}\n                                setValue={setValue}\n                            />\n                        ) : (\n                            <></>\n                        )}\n                        <div className=\"d-flex\">\n                            {isLoading ? (\n                                <Button\n                                    classNames=\"my-3\"\n                                    text={\n                                        <span className=\"spinner-border spinner-border-sm\"></span>\n                                    }\n                                    color=\"green\"\n                                />\n                            ) : (\n                                <Button\n                                    type=\"submit\"\n                                    classNames=\"my-3\"\n                                    text={saveButtonText || 'Submit'}\n                                    icon={formIcon}\n                                    color=\"green\"\n                                />\n                            )}\n                        </div>\n                    </div>\n                </form>\n            </>\n        )\n    }\n\n    const displayData = (\n        <>\n            {showTitle && <h4 className={textColour}>{formName} Form</h4>}\n            {getFormDetails()}\n        </>\n    )\n\n    return (\n        <div>\n            {isLoading ? (\n                <Loader />\n            ) : isError ? (\n                <ErrorPage text={error} />\n            ) : (\n                displayData\n            )}\n        </div>\n    )\n}\n\nForm.propTypes = {\n    formDetails: PropTypes.array,\n    postUrl: PropTypes.string,\n    formName: PropTypes.string,\n    formIcon: PropTypes.string,\n    showTitle: PropTypes.bool,\n    darkTheme: PropTypes.bool,\n    defaultValues: PropTypes.array,\n    requestType: PropTypes.string,\n    saveButtonText: PropTypes.string,\n    callback: PropTypes.func,\n    classNames: PropTypes.string,\n}\n\nexport default Form\n","import React, { useState } from 'react'\nimport UploadFileButton from '../../UploadFileButton'\nimport StarRating from '../../../StarRating'\nimport { previewCardColorPalette } from '../../../../../constants/Colors'\nimport './index.scss'\n\nconst defaultPicture =\n    'https://storage.googleapis.com/evolv-assets/trainers/default.png'\n\nconst TemplateCard = ({\n    name,\n    imgUrl,\n    tagline,\n    colorIndex,\n    peopleTrained,\n    rating = 4.5,\n}) => {\n    let color = previewCardColorPalette[colorIndex].dark ? 'white' : 'black'\n    return (\n        <div\n            style={{\n                backgroundColor: previewCardColorPalette[colorIndex].themeColor,\n                color: color,\n            }}\n            className=\"template-card-container\"\n        >\n            <div className=\"left\">\n                <img\n                    className=\"trainer-image\"\n                    src={imgUrl ?? defaultPicture}\n                    alt=\"\"\n                />\n            </div>\n            <div className=\"right\">\n                <p className=\"name\">{name}</p>\n                <StarRating\n                    size=\"v-small\"\n                    star={rating}\n                    edit={false}\n                    align={'center'}\n                    reverse\n                    count={1}\n                />\n                <p className=\"tagline\">{tagline}</p>\n                <p className=\"people-trained-text\">{peopleTrained}</p>\n                <p className=\"people-trained\">people trained</p>\n            </div>\n        </div>\n    )\n}\n\nexport default TemplateCard\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Modal } from 'react-bootstrap'\nimport ShadowContainer from '../ShadowContainer'\nimport './index.scss'\nimport { Icon } from '@iconify/react'\n\nconst CloseButtonIcon = '/images/closeWhite.svg'\n// const CloseButtonIcon =\n//     'https://storage.googleapis.com/evolv-store/icons/common/close.svg'\n\nconst CustomModal = ({\n    onHide,\n    children,\n    show,\n    title,\n    width = 'large',\n    dark = false,\n    ...props\n}) => {\n    return (\n        <Modal\n            {...props}\n            show={show}\n            size=\"xs\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            dialogClassName={`modal-${width}`}\n            contentClassName=\"no-background\"\n        >\n            <ShadowContainer>\n                <Modal.Body\n                    className={`modal-container modal-container-${width} ${\n                        dark && 'dark'\n                    }`}\n                >\n                    <div className=\"modal-header-container\">\n                        <h4 className=\"modal-title\">{title}</h4>\n                        {/* <img\n                            onClick={onHide}\n                            className=\"close-button-icon\"\n                            src={CloseButtonIcon}\n                            alt=\"close-icon\"\n                        /> */}\n                        <Icon\n                            icon={'ep:close-bold'}\n                            onClick={onHide}\n                            className=\"close-button-icon\"\n                        />\n                    </div>\n                    <div className=\"modal-body-container\">{children}</div>\n                </Modal.Body>\n            </ShadowContainer>\n        </Modal>\n    )\n}\n\nCustomModal.propTypes = {\n    show: PropTypes.bool,\n    width: PropTypes.string,\n    onHide: PropTypes.func,\n    children: PropTypes.element,\n    dark: PropTypes.bool,\n    title: PropTypes.string,\n}\n\nexport default CustomModal\n"],"names":["_ref","columns","data","fetchData","loading","pageCount","controlledPageCount","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","useTable","initialState","manualPagination","usePagination","searchText","setSearchText","useState","React","_jsxs","className","children","_jsx","InputBox","darkTheme","type","placeholder","divClassNames","value","onChange","evt","_evt$target","target","map","headerGroup","headerGroupIdx","getHeaderGroupProps","headers","column","columnIndex","getHeaderProps","render","row","i","_createElement","getRowProps","key","cells","cell","cellIndex","getCellProps","colSpan","length","onClick","disabled","defaultValue","e","Number","style","width","productForm","updateForm","tableDetails","fetchURL","postURL","updateURL","deleteURL","formName","defaultValues","setDefaultValues","showModalUpdate","setShowModalUpdate","showModalAdd","setShowModalAdd","setData","setLoading","error","setError","setPageCount","fetchIdRef","async","_ref2","current","_response$data","_response$data2","response","axios","get","concat","content","editButton","editRow","deleteButton","deleteRow","totalPages","err","delete","id","alert","form","Header","accessor","fieldName","Cell","displayData","Button","classNames","color","text","Table","Modal","show","onHide","Form","formDetails","postUrl","requestType","callback","title","updateData","Loader","ErrorPage","InternalServerErrorPage","errorType","register","control","helper","fieldKey","subFields","size","indexes","setIndexes","counter","setCounter","useEffect","indexList","count","index","push","_Fragment","k","name","idx","DynamicDropdown","defaultOptions","options","multi","canCreate","label","refValue","required","validation","readOnly","labelClass","inputLabel","inputClassNames","addRow","prevIndexes","prevCounter","clearRows","props","setValue","TemplateCard","imgUrl","peopleTrained","tagline","colorIndex","PreviewCard","formIcon","showTitle","saveButtonText","saveForLater","previewCard","transformations","setTransformations","modifier","isLoading","setIsLoading","isError","setIsError","submittedData","setSubmittedData","getDefaultForm","defaultKeyValues","Object","values","forEach","keyName","idFieldName","v","textColour","handleSubmit","errors","reset","getValues","watch","formState","isSubmitSuccessful","useForm","allFields","console","log","_allFields$phoneNumbe","_allFields$experience","_allFields$tagline","_allFields$peopleTrai","_allFields$phoneNumbe2","_allFields$experience2","_allFields$tagline2","_allFields$peopleTrai2","phoneNumber","slice","experience","onSubmit","saveData","dataM","post","put","_err$response","_err$response$data","message","getFormDetails","formInputs","ref","hidden","ListOfValues","_value$validation","_value$validation2","_value$validation3","_value$validation4","errorClassName","maxOptions","maxCharLength","minOptions","errorMessage","_getValues","isRequired","requiredDependsOn","UploadFileButton","acceptableFileExtensions","buttonText","GenderSelection","ColorSelector","DatePickerComponent","Transformations","TextArea","rows","cols","StarRating","edit","reverse","isHalf","star","showNumber","maxLength","PreviewCardContainer","icon","rating","previewCardColorPalette","dark","backgroundColor","themeColor","src","alt","align","centered","dialogClassName","contentClassName","ShadowContainer","Body","Icon"],"sourceRoot":""}