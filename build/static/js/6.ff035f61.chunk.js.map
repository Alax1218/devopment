{"version":3,"file":"static/js/6.ff035f61.chunk.js","mappings":"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","sources":["components/Trainer/WorkoutCycle/CycleHeader/index.jsx","components/Trainer/WorkoutCycle/DaysHeader/index.jsx","components/Trainer/WorkoutCycle/DaysHeader/reorderDaysHeader.jsx","components/Trainer/WorkoutCycle/DayDetails/index.jsx","components/Trainer/WorkoutCycle/index.jsx","components/Trainer/Workout/Remaining/index.jsx","components/Trainer/Workout/index.jsx"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './index.scss'\nimport { useEffect } from 'react'\nimport { useState } from 'react'\nimport {\n    VISIBILITY_TRAINER,\n    VISIBILITY_WORLD,\n} from '../../../../constants/constants'\nimport Button from '../../../Common/Button'\n\nconst CycleHeader = ({\n    cycleDropdown,\n    setSelectedCycle,\n    selectedCycleId,\n    addCycle = () => {},\n    cloneCycle = () => {},\n    showReorder = () => {},\n    numDays,\n}) => {\n    const [cycleOptions, setCycleOptions] = useState({\n        client: [],\n        trainer: [],\n        world: [],\n    })\n    useEffect(() => {\n        const cycleOptions = {\n            client: [],\n            trainer: [],\n            world: [],\n        }\n\n        // cycleDropdown.forEach((cd) => {\n        //     if (cd?.visibility === VISIBILITY_WORLD) cycleOptions.world.push(cd)\n        //     else if (cd?.visibility === VISIBILITY_TRAINER)\n        //         cycleOptions.trainer.push(cd)\n        //     else cycleOptions.client.push(cd)\n        // })\n        cycleOptions.world.push(cycleDropdown.globalCycles)\n        cycleOptions.trainer.push(cycleDropdown.allClientsCycle)\n        cycleOptions.client.push(cycleDropdown.clientSpecificCycle)\n        setCycleOptions(cycleOptions)\n    }, [cycleDropdown])\n\n    const getOptions = (options) =>\n        options[0]?.map((cd, idx) => (\n            <option key={idx} className={`cycle-option`} value={cd?._id}>\n                {cd?.name}\n            </option>\n        ))\n\n    return (\n        <div className=\"cycle-header\">\n            <h4>Cycle</h4>\n            <select\n                required\n                name=\"cycle\"\n                className=\"cycle-dropdown\"\n                value={selectedCycleId}\n                onChange={(e) => {\n                    setSelectedCycle(e?.target?.value)\n                }}\n                disabled={selectedCycleId == 1}\n            >\n                <option className=\"disabled-option\" disabled>\n                    GLOBAL\n                </option>\n                {getOptions(cycleOptions.world)}\n                <option className=\"disabled-option\" disabled>\n                    ALL CLIENTS\n                </option>\n                {getOptions(cycleOptions.trainer)}\n                <option className=\"disabled-option\" disabled>\n                    THIS CLIENT\n                </option>\n                {getOptions(cycleOptions.client)}\n            </select>\n            <div className=\"add-cycle-button-div\">\n                <div>\n                    {selectedCycleId == 1 ? (\n                        <></>\n                    ) : (\n                        <Button\n                            classNames=\"no-word-wrap\"\n                            text={'Add'}\n                            onClick={() => {\n                                addCycle()\n                            }}\n                            iconComponent=\"eos-icons:content-new\"\n                        />\n                    )}\n                </div>\n                <div>\n                    {selectedCycleId == 1 ? (\n                        <></>\n                    ) : (\n                        <Button\n                            classNames=\"no-word-wrap\"\n                            text={'Clone'}\n                            onClick={() => {\n                                cloneCycle()\n                            }}\n                            iconComponent=\"fa6-regular:clone\"\n                        />\n                    )}\n                </div>\n                <div>\n                    <Button\n                        classNames=\"no-word-wrap\"\n                        text={'Reorder'}\n                        onClick={() => {\n                            showReorder()\n                        }}\n                        iconComponent=\"mdi:restart\"\n                    />\n                </div>\n            </div>\n            {/* <div className=\"days-per-week\">\n                <img src=\"/images/Group.svg\" alt=\"\" height={25} />\n                <span>{numDays} day per week</span>\n            </div>\n            <div className=\"approx-time\">\n                <img src=\"/images/clock.svg\" alt=\"\" height={25} />\n                <span>30-45 mins</span>\n            </div> */}\n        </div>\n    )\n}\n\nCycleHeader.propTypes = {\n    cycleDropdown: PropTypes.object,\n    setSelectedCycle: PropTypes.func,\n    numDays: PropTypes.number,\n    selectedCycleId: PropTypes.number,\n}\n\nexport default CycleHeader\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport Button from '../../../Common/Button'\nimport './index.scss'\nimport { Icon } from '@iconify/react'\n\nconst DaysHeader = ({\n    cycleRoutines,\n    selectedDay,\n    setSelectedDay,\n    addWorkout,\n    addRestDay,\n    deleteDay,\n    global,\n    cloneDay,\n}) => {\n    const [isError, setIsError] = useState(false)\n    useEffect(() => {\n        if (isError) {\n            setTimeout(() => {\n                setIsError(false)\n            }, 4000)\n        }\n    }, [isError])\n\n    return (\n        <>\n            <div className=\"days-header\">\n                <div className=\"routine-container\">\n                    {cycleRoutines?.map((cr, idx) => (\n                        <div\n                            className={`routine-summary ${\n                                selectedDay === idx && 'selected'\n                            }`}\n                            key={idx}\n                            onClick={() => setSelectedDay(idx)}\n                        >\n                            <div className=\"day-number\">{cr?.dayNumber}</div>\n                            <div className=\"routine-name\">{cr?.name}</div>\n                            {global ? (\n                                <></>\n                            ) : (\n                                <div>\n                                    <Icon\n                                        onClick={() => {\n                                            if (cycleRoutines?.length == 1) {\n                                                setIsError(true)\n                                                return\n                                            }\n                                            setIsError(false)\n                                            deleteDay(idx)\n                                        }}\n                                        className={`close-button-icon ${\n                                            selectedDay === idx && 'selected'\n                                        }`}\n                                        height={8}\n                                        icon={'ep:close-bold'}\n                                    />\n                                    <Icon\n                                        className=\"clone-day-icon\"\n                                        text={'Clone day'}\n                                        onClick={() => {\n                                            cloneDay(idx)\n                                        }}\n                                        icon={'clarity:clone-solid'}\n                                    />\n                                </div>\n                            )}\n                        </div>\n                    ))}\n                </div>\n\n                {global ? (\n                    <></>\n                ) : (\n                    <div className=\"add-edit-container\">\n                        <Button\n                            type=\"button\"\n                            disabled={cycleRoutines?.length >= 7}\n                            classNames=\"add-workout-btn\"\n                            text={'+ Add Workout'}\n                            onClick={addWorkout}\n                        />\n                        <Button\n                            type=\"button\"\n                            disabled={cycleRoutines?.length >= 7}\n                            classNames=\"add-workout-btn\"\n                            text={'+ Add Rest'}\n                            onClick={addRestDay}\n                        />\n                    </div>\n                )}\n            </div>\n            {isError ? (\n                <small className=\"message error\">\n                    There must be atleast one day routine\n                </small>\n            ) : (\n                <></>\n            )}\n        </>\n    )\n}\n\nDaysHeader.propTypes = {\n    cycleRoutines: PropTypes.array,\n    selectedDay: PropTypes.number,\n    setSelectedDay: PropTypes.func,\n    addWorkout: PropTypes.func,\n    addRestDay: PropTypes.func,\n    deleteDay: PropTypes.func,\n    cloneDay: PropTypes.func,\n}\n\nexport default DaysHeader\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport Button from '../../../Common/Button'\nimport './index.scss'\nimport { Icon } from '@iconify/react'\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd'\n\nconst ReorderDaysHeader = ({\n    actualCycle,\n    setShowReorderModal,\n    setSelectedCycle,\n}) => {\n    const [isError, setIsError] = useState(false)\n    useEffect(() => {\n        if (isError) {\n            setTimeout(() => {\n                setIsError(false)\n            }, 4000)\n        }\n    }, [isError])\n\n    const cycleRoutines = [...actualCycle.routineRefs]\n    const onDragEnd = (result) => {\n        if (!result.destination) {\n            return\n        }\n        if (result?.destination?.index === result?.source?.index) {\n            return\n        }\n        const [removed] = cycleRoutines.splice(result?.source?.index, 1)\n        cycleRoutines?.splice(result?.destination?.index, 0, removed)\n        cycleRoutines?.forEach(function (day, ind) {\n            day.dayNumber = ind + 1\n        })\n    }\n\n    const saveCycle = () => {\n        setSelectedCycle(cycleRoutines)\n        setShowReorderModal(false)\n    }\n\n    return (\n        <>\n            <div className=\"reorder-days-header\">\n                <div className=\"days-header\">\n                    <div className=\"routine-container\">\n                        <DragDropContext onDragEnd={onDragEnd}>\n                            <Droppable\n                                droppableId=\"cycleList\"\n                                // direction=\"horizontal\"\n                                key=\"cycleKey\"\n                            >\n                                {(provided) => (\n                                    <div\n                                        ref={provided.innerRef}\n                                        {...provided.droppableProps}\n                                    >\n                                        {cycleRoutines?.map((cr, idx) => (\n                                            <Draggable\n                                                draggableId={\n                                                    'drag' + cr?.dayNumber\n                                                }\n                                                index={idx}\n                                                key={'key' + cr?.dayNumber}\n                                            >\n                                                {(provided) => {\n                                                    return (\n                                                        <div\n                                                            className=\"routine-summary\"\n                                                            key={cr?._id}\n                                                            {...provided.dragHandleProps}\n                                                            {...provided.draggableProps}\n                                                            ref={\n                                                                provided.innerRef\n                                                            }\n                                                        >\n                                                            <div className=\"day-number\">\n                                                                {cr?.dayNumber}\n                                                            </div>\n                                                            <div className=\"routine-name\">\n                                                                {cr?.name}\n                                                            </div>\n                                                        </div>\n                                                    )\n                                                }}\n                                            </Draggable>\n                                        ))}\n                                        {provided.placeholder}\n                                    </div>\n                                )}\n                            </Droppable>\n                        </DragDropContext>\n                    </div>\n                </div>\n                {/* <div className=\"reorder-btn\"> */}\n                <Button\n                    text={'Save'}\n                    color=\"green\"\n                    onClick={() => {\n                        saveCycle()\n                    }}\n                    classNames=\"reorder-btn\"\n                />\n                {/* </div> */}\n            </div>\n        </>\n    )\n}\n\nReorderDaysHeader.propTypes = {\n    actualCycle: PropTypes.array,\n    setShowReorderModal: PropTypes.func,\n    setSelectedCycle: PropTypes.func,\n}\n\nexport default ReorderDaysHeader\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport SessionTable from '../../Workout/Session/SessionTable'\nimport './index.scss'\nimport { estimatedWorkoutTime } from '../../../../utilities/utilities'\nimport SessionThemePicker from '../../Workout/Session/SessionThemePicker'\nimport SessionThemeCard from '../../Workout/Session/SessionThemePicker/SessionThemeCard'\nimport { Icon } from '@iconify/react'\n\nconst DayDetails = ({\n    routine,\n    setRoutine,\n    exerciseError,\n    exerciseErrorMessage,\n    sessionThemes,\n    global,\n    isThisClient,\n}) => {\n    const [workoutTime, setWorkoutTime] = useState(0)\n    const [selectedSessionTheme, setSelectedSessionTheme] = useState(\n        routine?.sessionThemeRef,\n    )\n    useEffect(() => {\n        setWorkoutTime(estimatedWorkoutTime(routine?.exercises))\n        setSelectedSessionTheme(routine?.sessionThemeRef)\n    }, [routine])\n    useEffect(() => {\n        const updatedRoutine = { ...routine }\n        updatedRoutine['sessionThemeRef'] = selectedSessionTheme\n        setRoutine(updatedRoutine)\n    }, [selectedSessionTheme])\n    const changeRoutineName = (value) => {\n        const updatedRoutine = { ...routine }\n        updatedRoutine.name = value\n        setRoutine(updatedRoutine)\n    }\n\n    const setExercises = (exercises) => {\n        const updatedRoutine = { ...routine }\n        updatedRoutine.exercises = exercises\n        setRoutine(updatedRoutine)\n    }\n    return routine?.restDay ? (\n        <div className=\"cycle-routine-container rest-day\">\n            <span>Rest Day</span>\n        </div>\n    ) : (\n        <>\n            {global ? (\n                <SessionThemeCard\n                    sessionTheme={\n                        sessionThemes?.filter(\n                            (sessionTheme) =>\n                                sessionTheme?._id == selectedSessionTheme,\n                        )[0]\n                    }\n                />\n            ) : (\n                <SessionThemePicker\n                    slidesToShow={8}\n                    selectedCard={selectedSessionTheme}\n                    setSelectedCard={setSelectedSessionTheme}\n                    sessionThemes={sessionThemes}\n                    breakpoints={[1024, 900, 800, 600, 520, 380, 100]}\n                />\n            )}\n            <div className=\"cycle-routine-container\">\n                <div className=\"routine-summary\">\n                    {global ? (\n                        <div className=\"routine-name\">{routine?.name}</div>\n                    ) : (\n                        <input\n                            className=\"routine-name\"\n                            type=\"text\"\n                            value={routine?.name}\n                            onChange={(evt) =>\n                                changeRoutineName(evt?.target?.value)\n                            }\n                        />\n                    )}\n                    <div className=\"footer-container\">\n                        <div className=\"summary-row\">\n                            {/* <img\n                                src=\"/images/weightlifting.svg\"\n                                alt=\"\"\n                                height={18}\n                            /> */}\n                            <Icon icon={'mdi:weight-lifter'} height={18} />\n                            <span>\n                                {routine?.exercises?.length} exercise(s)\n                            </span>\n                        </div>\n                        <div className=\"summary-row\">\n                            <Icon icon={'mdi:arm-flex-outline'} height={18} />\n                            {/* <img\n                                src=\"/images/male-flexing.svg\"\n                                alt=\"\"\n                                height={18}\n                            /> */}\n                            <span>\n                                {routine?.exercises?.reduce(\n                                    (sum, curr) =>\n                                        sum + curr?.exerciseSets?.length,\n                                    0,\n                                )}\n                                {' set(s)'}\n                            </span>\n                        </div>\n                        <div className=\"summary-row\">\n                            <Icon icon={'fa6-solid:clock'} height={18} />\n                            {/* <img src=\"/images/clock.svg\" alt=\"\" height={18} /> */}\n                            <span>{workoutTime} min</span>\n                        </div>\n                    </div>\n                </div>\n                <SessionTable\n                    key={routine?._id}\n                    exercises={routine?.exercises}\n                    setExercises={setExercises}\n                    isEditing={!global}\n                    completed={false}\n                    isError={exerciseError}\n                    errorMessage={exerciseErrorMessage}\n                    modal={true}\n                    autoPrefill={isThisClient}\n                />\n            </div>\n        </>\n    )\n}\n\nDayDetails.propTypes = {\n    routine: PropTypes.object,\n    setRoutine: PropTypes.func,\n}\n\nexport default DayDetails\n","import React from 'react'\nimport PropTypes, { element } from 'prop-types'\nimport axios from '../../../store/axios-secure'\nimport './index.scss'\nimport { useEffect } from 'react'\nimport { useState } from 'react'\nimport Loader from '../../Common/Loader'\nimport CycleHeader from './CycleHeader'\nimport DaysHeader from './DaysHeader'\nimport ReorderDaysHeader from './DaysHeader/reorderDaysHeader'\nimport InternalServerErrorPage from '../../Common/ErrorPage/InternalServerErrorPage'\nimport DayDetails from './DayDetails'\nimport Button from '../../Common/Button'\nimport CustomModal from '../../Common/Modal'\nimport {\n    ROLE_ADMIN,\n    ROLE_TRAINER,\n    VISIBILITY_CLIENT,\n    VISIBILITY_TRAINER,\n    VISIBILITY_WORLD,\n} from '../../../constants/constants'\nimport { getNumDaysPerWeek } from '../../../utilities/utilities'\nimport auth from '../../../firebase-config'\nimport ErrorPage from '../../Common/ErrorPage'\nimport SessionThemePicker from '../Workout/Session/SessionThemePicker'\n\nconst Cycle = ({ clientId, setCycle }) => {\n    const [askForNameModal, setAskForNameModal] = useState(false)\n    const [askForNameModalMakeActive, setAskForNameModalMakeActive] =\n        useState(false)\n    const [modalInputDetails, setmodalInputDetails] = useState({\n        name: '',\n        isThisClient: false,\n        makeActive: false,\n        cycle: null,\n    })\n    const [modalUpdatedCycleDetails, setModalUpdatedCycleDetails] = useState({})\n    const [cycleDropdown, setCycleDropdown] = useState([])\n    const [selectedCycleId, setSelectedCycleId] = useState(-1)\n    const [showSelectCycle, setShowSelectCycle] = useState(false)\n    const [selectedCycle, setSelectedCycle] = useState({})\n    const [selectedDay, setSelectedDay] = useState(0)\n    const [isExerciseError, setIsExerciseError] = useState(false)\n    const [exerciseErrorMessage, setExerciseErrorMessage] = useState({\n        message: 'Error',\n        index: 1,\n    })\n    // const [loadingOption, setLoadingOptions] = useState(true)\n    const [loadingCycle, setLoadingCycle] = useState(true)\n    const [errorOption, setErrorOptions] = useState(false)\n    const [errorCycle, setErrorCycle] = useState(false)\n    const [isError, setIsError] = useState(false)\n    const [errorMessage, setErrorMessage] = useState('Could not be saved')\n    const [isMakeActive, setIsMakeActive] = useState(false)\n    const [isThisClient, setIsThisClient] = useState(true)\n    const [clientCycle, setClientCycle] = useState(null)\n    const [isModalError, setIsModalError] = useState(false)\n    const [isSuccess, setIsSuccess] = useState(false)\n    const [sessionThemes, setSessionThemes] = useState([])\n    const [showDeleteModal, setShowDeleteModal] = useState(false)\n    const [showReorderModal, setShowReorderModal] = useState(false)\n    const { currentUser } = auth\n\n    const fetchCycleOptions = async (id) => {\n        setSelectedCycleId(-1)\n        setLoadingCycle(true)\n        try {\n            const response = await axios.get(\n                `workoutpnp/cycles?clientId=${clientId}`,\n            )\n            const sessionThemesResponse = await axios.get(\n                `trainers/sessions/remaining?userRef=${clientId}`,\n            )\n            setSessionThemes(sessionThemesResponse?.data?.sessionThemes)\n            setCycleDropdown(response?.data)\n            var globalCycle = response.data.globalCycles\n            var allClientsCycle = response.data.allClientsCycle\n            var clientSpecificCycle = response.data.clientSpecificCycle\n            const allCycles = [\n                ...response.data.globalCycles,\n                ...response.data.allClientsCycle,\n                ...response.data.clientSpecificCycle,\n            ]\n            setClientCycle(response?.data?.cycleRef)\n            if (id == null) {\n                for (const cycle of allCycles) {\n                    cycle['makeActive'] = false\n                    if (cycle._id == response?.data?.cycleRef) {\n                        cycle.makeActive = true\n                        setIsMakeActive(true)\n                        setSelectedCycleId(cycle._id)\n                    }\n                }\n                if (allCycles?.length == 1) {\n                    setSelectedCycleId(allCycles[0]?._id)\n                }\n            } else {\n                for (const cycle of allCycles) {\n                    cycle['makeActive'] = false\n                    if (cycle._id == response?.data?.cycleRef) {\n                        cycle.makeActive = true\n                    }\n                }\n                setSelectedCycleId(id)\n            }\n            setLoadingCycle(false)\n            setErrorOptions(false)\n        } catch (error) {\n            setLoadingCycle(false)\n            setErrorOptions(true)\n        }\n    }\n    useEffect(() => {\n        if (isError) {\n            setTimeout(() => {\n                setIsError(false)\n            }, 15000)\n        }\n        if (isExerciseError) {\n            setTimeout(() => {\n                setIsExerciseError(false)\n            }, 5000)\n        }\n        if (isSuccess) {\n            setTimeout(() => {\n                setIsSuccess(false)\n            }, 15000)\n        }\n    }, [isError, isExerciseError, isSuccess])\n    const isValid = () => {\n        let found = false\n        let names = []\n        selectedCycle?.routineRefs?.forEach((routine, idx) => {\n            if (\n                !found &&\n                !routine?.restDay &&\n                routine?.sessionThemeRef == undefined\n            ) {\n                setSelectedDay(idx)\n                setErrorMessage('Please pick session theme')\n                found = true\n                setIsError(true)\n                return\n            }\n            if (!found && routine?.name == '') {\n                setSelectedDay(idx)\n                setErrorMessage('Please enter valid routine name')\n                found = true\n                setIsError(true)\n                return\n            }\n            if (!found && !routine?.restDay) {\n                names.push(routine?.name)\n            }\n            if (\n                !found &&\n                !routine?.restDay &&\n                routine?.exercises?.length == 0\n            ) {\n                setSelectedDay(idx)\n                setErrorMessage('Please add atleast one exercise')\n                found = true\n                setIsError(true)\n                return\n            }\n            if (!found) {\n                routine?.exercises?.forEach((exercise, index) => {\n                    if (exercise?.exerciseInfoRef === '-') {\n                        setExerciseErrorMessage({\n                            message: 'Please enter valid exercise name',\n                            index: index,\n                        })\n                        setSelectedDay(idx)\n                        setIsError(false)\n                        setIsExerciseError(true)\n                        found = true\n                        return\n                    }\n                })\n            }\n            if (!found) {\n                routine.exercises?.forEach((exercise, index) => {\n                    exercise?.exerciseSets?.map((e) => {\n                        if (\n                            e.suggestedWeightRange.length > 1 &&\n                            e.suggestedWeightRange[0] != null &&\n                            e.suggestedWeightRange[1] != null &&\n                            parseInt(e.suggestedWeightRange[0]) >\n                                parseInt(e.suggestedWeightRange[1])\n                        ) {\n                            found = true\n                            setExerciseErrorMessage({\n                                message:\n                                    'Second value of weight cannot be less than first one',\n                                index: index,\n                            })\n                            setIsExerciseError(true)\n                            return\n                        }\n                        if (\n                            e.suggestedRepRange.length > 1 &&\n                            e.suggestedRepRange[0] != null &&\n                            e.suggestedRepRange[1] != null &&\n                            parseInt(e.suggestedRepRange[0]) >\n                                parseInt(e.suggestedRepRange[1])\n                        ) {\n                            found = true\n                            setExerciseErrorMessage({\n                                message:\n                                    'Second value of reps cannot be less than first one',\n                                index: index,\n                            })\n                            setIsExerciseError(true)\n                            return\n                        }\n                        if (\n                            e.suggestedRIRRange.length > 1 &&\n                            e.suggestedRIRRange[0] != null &&\n                            e.suggestedRIRRange[1] != null &&\n                            parseInt(e.suggestedRIRRange[0]) >\n                                parseInt(e.suggestedRIRRange[1])\n                        ) {\n                            found = true\n                            setExerciseErrorMessage({\n                                message:\n                                    'Second value of RIR cannot be less than first one',\n                                index: index,\n                            })\n                            setIsExerciseError(true)\n                            return\n                        }\n                    })\n                })\n            }\n        })\n        if (new Set(names).size !== names.length) {\n            setErrorMessage('Routine names must be unique')\n            found = true\n            setIsError(true)\n        }\n        return found\n    }\n    const getSortedData = (cycleDetails) => {\n        const sortedCycle = { ...cycleDetails }\n        sortedCycle.routineRefs = sortedCycle?.routineRefs\n            ?.sort((cr1, cr2) => cr1?.dayNumber - cr2?.dayNumber)\n            .map((cr, dayNum) => {\n                return {\n                    ...cr,\n                    exercises: cr?.exercises?.map((ce) => {\n                        return {\n                            ...ce,\n                            exerciseSets: ce?.exerciseSets\n                                ?.sort((s1, s2) => s1?.number - s2?.number)\n                                .map((s, id) => {\n                                    return { ...s, number: id + 1 }\n                                }),\n                        }\n                    }),\n                }\n            })\n        let newRoutineRefs = []\n        for (let i = 0; i < sortedCycle?.routineRefs?.length; i++) {\n            if (i == 0 && sortedCycle?.routineRefs[i].dayNumber != 1) {\n                newRoutineRefs.push({\n                    name: 'Rest Day',\n                    restDay: true,\n                    dayNumber: i + 1,\n                    exercises: [],\n                })\n            } else if (\n                i > 0 &&\n                sortedCycle?.routineRefs[i].dayNumber -\n                    sortedCycle?.routineRefs[i - 1].dayNumber !=\n                    1\n            ) {\n                for (\n                    let daysDifferenceCount = 0;\n                    daysDifferenceCount <\n                    sortedCycle?.routineRefs[i].dayNumber -\n                        sortedCycle?.routineRefs[i - 1].dayNumber -\n                        1;\n                    daysDifferenceCount++\n                ) {\n                    newRoutineRefs.push({\n                        name: 'Rest Day',\n                        restDay: true,\n                        dayNumber: i + 1 + daysDifferenceCount,\n                        exercises: [],\n                    })\n                }\n            }\n            newRoutineRefs.push(sortedCycle?.routineRefs[i])\n        }\n        while (\n            newRoutineRefs.length != sortedCycle?.totalRoutines &&\n            newRoutineRefs.length < sortedCycle?.totalRoutines\n        ) {\n            newRoutineRefs.push({\n                name: 'Rest Day',\n                restDay: true,\n                dayNumber: newRoutineRefs.length + 1,\n                exercises: [],\n            })\n        }\n        sortedCycle.routineRefs = [...newRoutineRefs]\n        return sortedCycle\n    }\n\n    const fetchCycleDetails = async () => {\n        if (!selectedCycleId) return\n        setLoadingCycle(true)\n        try {\n            const sortedCycle = getSortedData(\n                [\n                    ...cycleDropdown.allClientsCycle,\n                    ...cycleDropdown.globalCycles,\n                    ...cycleDropdown.clientSpecificCycle,\n                ].find((element) => element._id == selectedCycleId),\n            )\n            setSelectedCycle(sortedCycle)\n            //if(sortedCycle)\n            // if (isInUse(sortedCycle)) {\n            //     setCycle(sortedCycle)\n            // }\n            setErrorCycle(false)\n            setLoadingCycle(false)\n            setShowSelectCycle(false)\n        } catch (err) {\n            setErrorOptions(true)\n\n            // if (err?.response?.status !== '404') setErrorCycle(true)\n            setLoadingCycle(false)\n        }\n    }\n\n    useEffect(() => {\n        setIsError(false)\n        setIsExerciseError(false)\n        if (selectedCycleId !== -1) {\n            fetchCycleDetails()\n        } else {\n            setShowSelectCycle(true)\n        }\n    }, [selectedCycleId])\n\n    useEffect(() => {\n        if (selectedCycle?.userRef == null) {\n            setIsThisClient(false)\n        } else {\n            setIsThisClient(true)\n        }\n        setIsMakeActive(selectedCycle?.makeActive)\n    }, [selectedCycle])\n\n    useEffect(() => {\n        let updatedCycle = selectedCycle\n        updatedCycle.makeActive = isMakeActive\n        setSelectedCycle(selectedCycle)\n    }, [isMakeActive])\n    useEffect(() => {\n        let updatedCycle = selectedCycle\n        updatedCycle.userRef = isThisClient ? clientId : null\n        setSelectedCycle(selectedCycle)\n    }, [isThisClient])\n    useEffect(() => {\n        fetchCycleOptions(null)\n    }, [])\n\n    const updateRoutine = (updatedRoutine, selectedDay) => {\n        const updatedCycle = { ...selectedCycle }\n        updatedCycle.routineRefs[selectedDay] = updatedRoutine\n        setSelectedCycle(updatedCycle)\n    }\n\n    const addWorkout = () => {\n        addDay(false)\n    }\n\n    const addRestDay = () => {\n        addDay(true)\n    }\n\n    const addDay = (isRestDay) => {\n        const updatedCycle = { ...selectedCycle }\n        updatedCycle.routineRefs.push({\n            name: isRestDay ? 'Rest Day' : 'New Routine',\n            restDay: isRestDay,\n            dayNumber: updatedCycle.routineRefs.length + 1,\n            exercises: [],\n        })\n        setSelectedCycle(updatedCycle)\n    }\n    const cloneDay = (idx) => {\n        const updatedCycle = { ...selectedCycle }\n        if (updatedCycle.routineRefs.length < 7) {\n            const clonedDay = updatedCycle.routineRefs[idx]\n            if (clonedDay.restDay) {\n                addDay(true)\n            } else {\n                updatedCycle.routineRefs.push({\n                    name: clonedDay.name + ' copy',\n                    restDay: clonedDay.isRestDay,\n                    dayNumber: updatedCycle.routineRefs.length + 1,\n                    exercises: clonedDay.exercises,\n                    sessionThemeRef: clonedDay.sessionThemeRef,\n                })\n                setSelectedCycle(updatedCycle)\n            }\n        }\n    }\n    const deleteDay = (idx) => {\n        const updatedCycle = { ...selectedCycle }\n        updatedCycle.routineRefs?.splice(idx, 1)\n        updatedCycle.routineRefs = updatedCycle.routineRefs\n            .sort((cr1, cr2) => cr1?.dayNumber - cr2?.dayNumber)\n            .map((cr, dayNum) => {\n                cr.dayNumber = dayNum + 1\n                return cr\n            })\n        setSelectedDay(selectedDay - 1)\n        setSelectedCycle(updatedCycle)\n    }\n    const isCycleNameUnique = () => {\n        let found = false\n        const allCycles = [\n            ...cycleDropdown.globalCycles,\n            ...cycleDropdown.allClientsCycle,\n            ...cycleDropdown.clientSpecificCycle,\n        ]\n        allCycles.forEach((value) => {\n            if (value?.name == modalInputDetails?.name) {\n                found = true\n                return\n            }\n        })\n        return found\n    }\n    const setReorderedCycle = (cycleRoutines) => {\n        const updatedCycle = { ...selectedCycle }\n        updatedCycle.routineRefs = cycleRoutines\n        setSelectedCycle(updatedCycle)\n    }\n    const closeReordered = () => {\n        const updatedCycle = { ...selectedCycle }\n        updatedCycle?.routineRefs?.forEach(function (day, ind) {\n            day.dayNumber = ind + 1\n        })\n        setSelectedCycle(updatedCycle)\n    }\n    const addNewCycle = async () => {\n        if (modalInputDetails?.name == '') {\n            setErrorMessage('Please enter valid cycle name')\n            setIsModalError(true)\n            return\n        }\n        if (isCycleNameUnique()) {\n            setErrorMessage('Please enter unique cycle name')\n            setIsModalError(true)\n            return\n        }\n        if (modalInputDetails?.cycle != null) {\n            modalInputDetails?.cycle?.routineRefs?.forEach((routine) => {\n                delete routine._id\n                routine?.exercises?.forEach((exercise) => {\n                    exercise._id = Math.random()\n                })\n            })\n        }\n        const newCycle =\n            modalInputDetails.cycle === null\n                ? {\n                      _id: 1,\n                      name: modalInputDetails?.name,\n                      isActive: true,\n                      global: false,\n                      isThisClient: modalInputDetails?.isThisClient,\n                      clientId: clientId,\n                      routineRefs: [\n                          { dayNumber: 1, exercises: [], name: 'New Routine' },\n                      ],\n                      totalRoutines: 1,\n                      makeActive: modalInputDetails?.makeActive,\n                      userRef: modalInputDetails.isThisClient ? clientId : null,\n                  }\n                : {\n                      ...modalInputDetails.cycle,\n                      _id: 1,\n                      isActive: true,\n                      global: false,\n                      name: modalInputDetails?.name,\n                      isThisClient: modalInputDetails?.isThisClient,\n                      makeActive: modalInputDetails?.makeActive,\n                      userRef: modalInputDetails.isThisClient ? clientId : null,\n                      clientId: clientId,\n                  }\n        let updatedCyclesOptions = cycleDropdown\n        if (modalInputDetails?.isThisClient) {\n            updatedCyclesOptions?.clientSpecificCycle?.push(newCycle)\n        } else {\n            updatedCyclesOptions?.allClientsCycle?.push(newCycle)\n        }\n        setCycleDropdown(updatedCyclesOptions)\n        setSelectedCycleId(1)\n        setIsMakeActive(modalInputDetails.makeActive)\n        setIsThisClient(modalInputDetails.isThisClient)\n        setAskForNameModal(false)\n        setSelectedCycle(newCycle)\n        setAskForNameModalMakeActive(false)\n    }\n    // const saveCycle = async (\n    //     updatedCycle,\n    //     bypassIdCheck,\n    //     cycleName = selectedCycle?.cycleName,\n    //     setSelectedCycleValues = true,\n    // ) => {\n    //     if (!bypassIdCheck && !updatedCycle?.id) {\n    //         setAskForNameModal(true)\n    //         setmodalInputDetails(selectedCycle?.cycleName)\n    //         setModalUpdatedCycleDetails(updatedCycle)\n    //         return\n    //     }\n    //     updatedCycle.cycleName = cycleName\n    //     try {\n    //         setLoadingCycle(true)\n    //         const response = await axios.post('workout/trainer/suggest/cycle', {\n    //             clientId: clientId,\n    //             workoutCycle: updatedCycle,\n    //         })\n    //         if (setSelectedCycleValues) {\n    //             setSelectedCycle(response?.data)\n    //             setSelectedCycleId(response?.data?.id)\n    //         }\n    //         if (isInUse(response?.data)) {\n    //             setCycle(response?.data)\n    //         }\n    //         setLoadingCycle(false)\n    //         addToCycleOptions(response?.data)\n    //         return response?.data\n    //     } catch (err) {\n    //         setErrorCycle(true)\n    //     }\n    // }\n\n    // const saveWithVisibility = async (\n    //     visibility,\n    //     visibilityCheckRequired = true,\n    // ) => {\n    //     const updatedCycle = { ...selectedCycle }\n    //     if (visibilityCheckRequired && updatedCycle.visibility !== visibility) {\n    //         updatedCycle.id = null\n    //         updatedCycle.visibility = visibility\n    //     }\n    //     setSelectedCycle(updatedCycle)\n    //     const response = await saveCycle(\n    //         updatedCycle,\n    //         false,\n    //         selectedCycle?.cycleName,\n    //         false,\n    //     )\n\n    //     return response\n    // }\n\n    // const saveCurrentCycle = () => {\n    //     if (\n    //         currentUser?.roles?.includes(ROLE_TRAINER) &&\n    //         selectedCycle.visibility === VISIBILITY_WORLD\n    //     ) {\n    //         makeActive()\n    //     } else {\n    //         saveWithVisibility(null, false)\n    //     }\n    // }\n\n    // const callMakeActive = async (updatedCycle) => {\n    //     try {\n    //         await axios.post('workout/trainer/suggest/cycle/activate', {\n    //             workoutCycleId: updatedCycle?.id,\n    //             workoutCycleName: updatedCycle?.cycleName,\n    //             clientId: clientId,\n    //         })\n    //         fetchCycleOptions()\n    //     } catch (err) {\n    //         setErrorCycle(true)\n    //     }\n    // }\n\n    // const saveThenMakeActive = async (cycleName = selectedCycle?.cycleName) => {\n    //     const updatedCycle = { ...selectedCycle }\n    //     updatedCycle.id = null\n    //     updatedCycle.visibility = VISIBILITY_CLIENT\n    //     if (\n    //         currentUser?.roles?.includes(ROLE_ADMIN) ||\n    //         selectedCycle.visibility != VISIBILITY_WORLD\n    //     ) {\n    //         saveCycle(selectedCycle)\n    //     }\n    //     const newCycle = await saveCycle(updatedCycle, true, cycleName, false)\n    //     callMakeActive(newCycle)\n    // }\n\n    // const makeActive = () => {\n    //     const updatedCycle = { ...selectedCycle }\n    //     if (updatedCycle.visibility !== VISIBILITY_CLIENT) {\n    //         setAskForNameModalMakeActive(true)\n    //         setmodalInputDetails(selectedCycle?.cycleName)\n    //     } else {\n    //         // callMakeActive(updatedCycle)\n    //     }\n    // }\n    const saveCurrentCycle = async () => {\n        let id = null\n        if (selectedCycle?.global) {\n            //implement make active for global\n            try {\n                setLoadingCycle(true)\n                await axios.put(`workoutpnp/cycles/${selectedCycle._id}`, {\n                    clientId: clientId,\n                })\n                setLoadingCycle(false)\n                setIsExerciseError(false)\n                setIsModalError(false)\n                fetchCycleOptions()\n                setIsSuccess(true)\n                setCycle(selectedCycle)\n            } catch (error) {\n                setLoadingCycle(false)\n                setErrorOptions(true)\n            }\n            return\n        }\n        if (isValid()) {\n            return\n        }\n\n        const updatedCycle = { ...selectedCycle }\n        const totalRoutines = updatedCycle?.routineRefs.length\n        // console.log(updatedCycle)\n        const cycleToUpload = {\n            ...updatedCycle,\n            routineRefs: updatedCycle.routineRefs.filter(\n                (element) => element?.restDay != true,\n            ),\n        }\n        let newCycle = JSON.parse(\n            JSON.stringify({\n                ...updatedCycle,\n                routines: cycleToUpload.routineRefs.map((element) => {\n                    if (element.restDay == false) {\n                        delete element.restDay\n                    }\n                    return element\n                }),\n                totalRoutines: totalRoutines,\n            }),\n        )\n        newCycle['routineRefs'] = [...newCycle.routines]\n        newCycle?.routineRefs?.map((routine) => {\n            routine?.exercises?.forEach((exercise) => {\n                if (typeof exercise?._id == 'number') {\n                    delete exercise?._id\n                }\n            })\n        })\n        try {\n            setLoadingCycle(true)\n            if (newCycle?._id == 1) {\n                const response = await axios.post('workoutpnp/cycles', {\n                    ...newCycle,\n                })\n                if (response && selectedCycle?.makeActive) {\n                    setCycle(response?.data)\n                }\n                id = response?.data?._id\n            } else {\n                const response = await axios.put(\n                    `workoutpnp/cycles/${selectedCycle._id}`,\n                    {\n                        routines: newCycle.routines,\n                        isThisClient: isThisClient,\n                        totalRoutines: totalRoutines,\n                        makeActive: isMakeActive,\n                        clientId: clientId,\n                    },\n                )\n                id = selectedCycle?._id\n                if (response) {\n                    if (response.data.cycleRef) {\n                        if (selectedCycle.makeActive) {\n                            setCycle(response.data?.updatedCycle)\n                        }\n                    } else setCycle(false)\n                }\n            }\n            setLoadingCycle(false)\n            setIsExerciseError(false)\n            setIsModalError(false)\n            fetchCycleOptions(id)\n            setIsSuccess(true)\n        } catch (error) {\n            setLoadingCycle(false)\n            setErrorOptions(true)\n        }\n        return\n    }\n\n    // const saveForAllCLients = async () => {\n    //     const updatedCycle = { ...selectedCycle }\n    //     const cycleToUpload = {\n    //         ...updatedCycle,\n    //         routineRefs: updatedCycle.routineRefs.filter(\n    //             (element) => element?.restDay != true,\n    //         ),\n    //     }\n    //     let newCycle = {\n    //         ...updatedCycle,\n    //         routines: cycleToUpload.routineRefs.map((element) => {\n    //             if (element.restDay == false) {\n    //                 delete element.restDay\n    //             }\n    //             return element\n    //         }),\n    //     }\n    //     newCycle = {\n    //         ...updatedCycle,\n    //         routines: cycleToUpload.routineRefs.map((element) => {\n    //             element.exercises?.map((e, idx) => {\n    //                 if (e._id == -1) {\n    //                     delete e._id\n    //                 }\n    //                 e.exerciseSets.map((ele, idx) => (ele['number'] = idx + 1))\n    //             })\n    //             return element\n    //         }),\n    //     }\n    //     console.log(newCycle)\n    //     const response = await axios.put(\n    //         `workoutpnp/cycles/${updatedCycle._id}`,\n    //         {\n    //             routines: newCycle.routines,\n    //         },\n    //     )\n    //     console.log(response)\n    // }\n    const deleteCycle = async () => {\n        try {\n            const response = await axios.put(\n                `workoutpnp/cycles/${selectedCycle._id}`,\n                {\n                    isActive: false,\n                },\n            )\n            setSelectedCycleId(-1)\n            setShowDeleteModal(false)\n            fetchCycleOptions()\n        } catch (err) {\n            setShowDeleteModal(false)\n            if (err?.response?.status == 405) {\n                setErrorMessage(\n                    \"This cycle is assigned to a user, so it can't be deleted.\",\n                )\n                setIsError(true)\n                return\n            }\n            setErrorCycle(true)\n        }\n    }\n    return errorCycle || errorOption ? (\n        <ErrorPage />\n    ) : loadingCycle ? (\n        <div className=\"cycle-modal-loading\">\n            <Loader />\n        </div>\n    ) : (\n        <div\n            className={\n                showReorderModal\n                    ? 'cycle-modal container darken'\n                    : 'cycle-modal container'\n            }\n        >\n            <CycleHeader\n                numDays={getNumDaysPerWeek(selectedCycle?.routineRefs)}\n                cycleDropdown={cycleDropdown}\n                setSelectedCycle={setSelectedCycleId}\n                selectedCycleId={selectedCycleId}\n                addCycle={() => {\n                    setAskForNameModal(true)\n                    setAskForNameModalMakeActive(true)\n                }}\n                cloneCycle={() => {\n                    setmodalInputDetails(\n                        structuredClone({\n                            ...modalInputDetails,\n                            cycle: selectedCycle,\n                        }),\n                    )\n                    setAskForNameModal(true)\n                    setAskForNameModalMakeActive(true)\n                }}\n                showReorder={() => {\n                    setShowReorderModal(true)\n                }}\n            />\n            {showSelectCycle ? (\n                'Please Select A Cycle'\n            ) : (\n                <>\n                    <DaysHeader\n                        cycleRoutines={selectedCycle?.routineRefs}\n                        selectedDay={selectedDay}\n                        setSelectedDay={setSelectedDay}\n                        addWorkout={addWorkout}\n                        addRestDay={addRestDay}\n                        deleteDay={deleteDay}\n                        cloneDay={cloneDay}\n                        global={selectedCycle?.global}\n                    />\n                    {isError ? (\n                        <small className=\"message error\">{errorMessage}</small>\n                    ) : isSuccess ? (\n                        <small className=\"message success\">\n                            Saved cycle successfully\n                        </small>\n                    ) : (\n                        <></>\n                    )}\n                    {selectedCycle?.routineRefs?.length == 0 ||\n                    selectedDay + 1 > selectedCycle?.routineRefs?.length ? (\n                        <div>Please add or select routines</div>\n                    ) : (\n                        <DayDetails\n                            sessionThemes={sessionThemes}\n                            routine={selectedCycle?.routineRefs[selectedDay]}\n                            setRoutine={(routine) =>\n                                updateRoutine(routine, selectedDay)\n                            }\n                            exerciseError={isExerciseError}\n                            exerciseErrorMessage={exerciseErrorMessage}\n                            global={selectedCycle?.global}\n                            isThisClient={isThisClient}\n                        />\n                    )}\n                    <div className=\"save-button-container\">\n                        {/* {selectedCycle.visibility !== VISIBILITY_TRAINER && (\n                        <Button\n                            text={'Save for All Clients'}\n                            color=\"green\"\n                            size=\"m\"\n                            onClick={() => saveForAllCLients()}\n                        />\n                    )} */}\n\n                        {/* {currentUser?.roles?.includes(ROLE_ADMIN) &&\n                        selectedCycle.visibility !== VISIBILITY_WORLD && (\n                            <Button\n                                text={'Save Global'}\n                                color=\"green\"\n                                size=\"m\"\n                                onClick={() =>\n                                    saveWithVisibility(\n                                        VISIBILITY_WORLD,\n                                        true,\n                                    )\n                                }\n                            />\n                        )} */}\n                        {selectedCycle?.global ? (\n                            <></>\n                        ) : (\n                            <div className=\"make-active-div\">\n                                <label className=\"container\">\n                                    <span className=\"text\">Make Active</span>\n                                    <input\n                                        type=\"checkbox\"\n                                        onChange={() => {\n                                            setIsMakeActive(!isMakeActive)\n                                        }}\n                                        checked={isMakeActive}\n                                    />\n                                    <span className=\"checkmark\"></span>\n                                </label>\n                            </div>\n                        )}\n\n                        {selectedCycle?.global ? (\n                            <></>\n                        ) : (\n                            <div className=\"toggle-div\">\n                                <div>This Client</div>\n                                <label className=\"switch\">\n                                    <input\n                                        type=\"checkbox\"\n                                        onChange={() => {\n                                            setIsThisClient(!isThisClient)\n                                        }}\n                                        checked={!isThisClient}\n                                    />\n                                    <span class=\"slider round\"></span>\n                                </label>\n                                <div>All Clients</div>\n                            </div>\n                        )}\n                        <div className=\"d-flex\">\n                            {selectedCycle?.global ? (\n                                <Button\n                                    classNames=\"action-button\"\n                                    text={'Make active'}\n                                    color=\"green\"\n                                    size=\"m\"\n                                    onClick={saveCurrentCycle}\n                                />\n                            ) : (\n                                <Button\n                                    classNames=\"action-button\"\n                                    text={'Save Cycle'}\n                                    color=\"green\"\n                                    size=\"m\"\n                                    onClick={saveCurrentCycle}\n                                />\n                            )}\n                            {selectedCycle._id == 1 || selectedCycle?.global ? (\n                                <></>\n                            ) : (\n                                <Button\n                                    classNames=\"action-button\"\n                                    text={'Delete Cycle'}\n                                    color=\"red\"\n                                    size=\"m\"\n                                    onClick={() => {\n                                        setShowDeleteModal(true)\n                                    }}\n                                />\n                            )}\n                        </div>\n                    </div>\n                </>\n            )}\n            <div>\n                <CustomModal\n                    title={'Delete Cycle'}\n                    show={showDeleteModal}\n                    onHide={() => setShowDeleteModal(false)}\n                    width=\"medium\"\n                    dark={true}\n                >\n                    <div>\n                        <p>Are you sure you want to delete the Cycle?</p>\n                        <div className=\"d-flex\">\n                            <Button\n                                text={'Yes'}\n                                color=\"green\"\n                                size=\"s\"\n                                onClick={deleteCycle}\n                            />\n                            <Button\n                                text={'No'}\n                                color=\"red\"\n                                size=\"s\"\n                                onClick={() => {\n                                    setShowDeleteModal(false)\n                                }}\n                            />\n                        </div>\n                    </div>\n                </CustomModal>\n            </div>\n            <div>\n                <CustomModal\n                    title={'Reorder Cycle'}\n                    show={showReorderModal}\n                    onHide={() => {\n                        closeReordered()\n                        setShowReorderModal(false)\n                    }}\n                    width=\"medium\"\n                    className=\"reorder-modal\"\n                    dark={true}\n                >\n                    <div className=\"reorder-div\">\n                        <ReorderDaysHeader\n                            actualCycle={selectedCycle}\n                            setShowReorderModal={setShowReorderModal}\n                            setSelectedCycle={setReorderedCycle}\n                        />\n                    </div>\n                </CustomModal>\n            </div>\n            <CustomModal\n                title={'Set Cycle Name'}\n                show={askForNameModal || askForNameModalMakeActive}\n                width=\"medium\"\n                onHide={() => {\n                    setAskForNameModal(false)\n                    setAskForNameModalMakeActive(false)\n                }}\n                className=\"cycle-name-input-modal\"\n                dark={true}\n            >\n                <div className=\"cycle-input-container\">\n                    <input\n                        type={'text'}\n                        className=\"cycle-name-input\"\n                        value={modalInputDetails?.name}\n                        onChange={(evt) =>\n                            setmodalInputDetails({\n                                ...modalInputDetails,\n                                name: evt?.target?.value,\n                            })\n                        }\n                    />\n\n                    <Button\n                        text={'Save Cycle'}\n                        color=\"green\"\n                        classNames=\"cycle-name-submit-button\"\n                        size=\"s\"\n                        onClick={() => {\n                            addNewCycle()\n                        }}\n                    />\n                </div>\n                <div className=\"modal-cycle-options\">\n                    <div className=\"make-active-div\">\n                        <label className=\"container\">\n                            <span className=\"text\">Make Active</span>\n                            <input\n                                type=\"checkbox\"\n                                onChange={() => {\n                                    setmodalInputDetails({\n                                        ...modalInputDetails,\n                                        makeActive:\n                                            !modalInputDetails?.makeActive,\n                                    })\n                                }}\n                                checked={modalInputDetails?.makeActive}\n                            />\n                            <span className=\"checkmark\"></span>\n                        </label>\n                    </div>\n\n                    <div className=\"toggle-div\">\n                        <div>This Client</div>\n                        <label className=\"switch\">\n                            <input\n                                type=\"checkbox\"\n                                onChange={() => {\n                                    setmodalInputDetails({\n                                        ...modalInputDetails,\n                                        isThisClient:\n                                            !modalInputDetails?.isThisClient,\n                                    })\n                                }}\n                                checked={!modalInputDetails?.isThisClient}\n                            />\n                            <span className=\"slider round\"></span>\n                        </label>\n                        <div>All Clients</div>\n                    </div>\n                </div>\n                {isModalError ? (\n                    <small className=\"message error\">{errorMessage}</small>\n                ) : (\n                    <></>\n                )}\n            </CustomModal>\n        </div>\n    )\n}\n\nCycle.propTypes = { clientId: PropTypes.string, setCycle: PropTypes.func }\n\nexport default Cycle\n\n// TODO Optimise Make Active Part. Can change server as well. Discuss\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport Button from '../../../Common/Button'\nimport CustomModal from '../../../Common/Modal'\nimport Cycle from '../../WorkoutCycle'\nimport axios from '../../../../store/axios-secure'\nimport Session from '../Session'\nimport './index.scss'\nimport Loader from '../../../Common/Loader'\nimport { getNumDaysPerWeek } from '../../../../utilities/utilities'\nimport { Icon } from '@iconify/react'\nimport { startOfDay } from 'date-fns'\n\nconst Remaining = ({ clientId, latestCompletedSession }) => {\n    const [sessions, setSessions] = useState([])\n    const [cycle, setCycle] = useState(false)\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(false)\n    const [activeCycleLoading, setActiveCycleLoading] = useState(false)\n    const [activeCycleError, setActiveCycleError] = useState(false)\n    const [showAddButton, setShowAddButton] = useState(true)\n    const [addErrorMessage, setAddErrorMessage] = useState(false)\n    const [sessionThemes, setSessionThemes] = useState([])\n    const [minDate, setMinDate] = useState()\n    const [timezone, setTimezone] = useState(0)\n    const deleteSession = (idx) => {\n        const sessionUpdated = [...sessions]\n        sessionUpdated.splice(idx, 1)\n        setSessions(sessionUpdated)\n    }\n    const fetchActiveCycle = async () => {\n        setActiveCycleLoading(true)\n        try {\n            const response = await axios.get(\n                `/workoutpnp/cycles/fetch?clientId=${clientId}`,\n            )\n            setCycle(response?.data)\n            setActiveCycleLoading(false)\n            setActiveCycleError(false)\n        } catch (err) {\n            if (err?.response?.status === 404) {\n                setActiveCycleError('Please Select a Cycle')\n            } else {\n                setActiveCycleError(true)\n            }\n            setActiveCycleLoading(false)\n        }\n    }\n\n    const fetchRemainingCardsData = async () => {\n        setLoading(true)\n        try {\n            const response = await axios.get(\n                `trainers/sessions/remaining?userRef=${clientId}`,\n            )\n            let updatedSessions = response?.data?.sessions?.sort(\n                (w1, w2) => new Date(w1.date) - new Date(w2.date),\n            )\n\n            const tempTimezone = response?.data?.offset\n            setTimezone(tempTimezone)\n\n            updatedSessions?.forEach((session) => {\n                session['editing'] = false\n            })\n            setSessions(updatedSessions)\n            setSessionThemes(response?.data?.sessionThemes)\n            setError(false)\n            setLoading(false)\n        } catch (error) {\n            setError('Unable fetch client details, please try again later')\n            setLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        fetchRemainingCardsData()\n        fetchActiveCycle()\n    }, [])\n    useEffect(() => {\n        let found = false\n        sessions?.forEach((session) => {\n            if (session?.editing) {\n                found = true\n                setShowAddButton(false)\n                return\n            }\n        })\n        if (!found) {\n            setShowAddButton(true)\n        }\n    }, [sessions])\n\n    //Set min date with the help of user timezone and latest completed session\n    const minDateFunction = async () => {\n        let tempTimezone = timezone\n        if (timezone === null) {\n            setTimezone(0)\n            tempTimezone = 0\n        }\n        const timezoneOffset = new Date().getTimezoneOffset()\n        const tempMinDate = new Date(\n            new Date().getTime() + (timezoneOffset - tempTimezone) * 60 * 1000,\n        )\n        const latestCompletedSessionDate = new Date(\n            new Date(latestCompletedSession?.date).getTime() +\n                timezoneOffset * 60 * 1000,\n        )\n        if (!latestCompletedSession) {\n            setMinDate(tempMinDate)\n        } else {\n            if (\n                startOfDay(tempMinDate).toISOString() ===\n                startOfDay(latestCompletedSessionDate).toISOString()\n            ) {\n                latestCompletedSessionDate.setDate(\n                    latestCompletedSessionDate.getDate() + 1,\n                )\n                setMinDate(latestCompletedSessionDate)\n            } else {\n                setMinDate(tempMinDate)\n            }\n        }\n    }\n\n    useEffect(() => {\n        minDateFunction()\n    }, [latestCompletedSession, timezone])\n\n    // const getSortedData = (cycle) => {\n    //     const sortedCycle = cycle.cycleRef;\n    //     sortedCycle.routineRefs = sortedCycle?.routineRefs\n    //         ?.sort((cr1, cr2) => cr1?.dayNumber - cr2?.dayNumber)\n    //         .map((cr, dayNum) => {\n    //             return {\n    //                 ...cr,\n    //                 exercises: cr?.exercises?.map((ce) => {\n    //                     return {\n    //                         ...ce,\n    //                         exerciseSets: ce?.exerciseSets\n    //                             ?.sort((s1, s2) => s1?.number - s2?.number)\n    //                             .map((s, id) => {\n    //                                 return { ...s, number: id + 1 }\n    //                             }),\n    //                     }\n    //                 }),\n    //             }\n    //         })\n    //     let newRoutineRefs = []\n    //     for (let i = 0; i < sortedCycle?.routineRefs?.length; i++) {\n    //         if (i == 0 && sortedCycle?.routineRefs[i].dayNumber != 1) {\n    //             newRoutineRefs.push({\n    //                 name: 'Rest Day',\n    //                 restDay: true,\n    //                 dayNumber: i + 1,\n    //                 exercises: [],\n    //             })\n    //         } else if (\n    //             i > 0 &&\n    //             sortedCycle?.routineRefs[i].dayNumber -\n    //                 sortedCycle?.routineRefs[i - 1].dayNumber !=\n    //                 1\n    //         ) {\n    //             newRoutineRefs.push({\n    //                 name: 'Rest Day',\n    //                 restDay: true,\n    //                 dayNumber: sortedCycle?.routineRefs[i].dayNumber - 1,\n    //                 exercises: [],\n    //             })\n    //         }\n    //         newRoutineRefs.push(sortedCycle?.routineRefs[i])\n    //     }\n    //     while (\n    //         newRoutineRefs.length != sortedCycle?.totalRoutines &&\n    //         newRoutineRefs.length < sortedCycle?.totalRoutines\n    //     ) {\n    //         newRoutineRefs.push({\n    //             name: 'Rest Day',\n    //             restDay: true,\n    //             dayNumber: newRoutineRefs.length + 1,\n    //             exercises: [],\n    //         })\n    //     }\n    //     sortedCycle.routineRefs = [...newRoutineRefs]\n    //     return sortedCycle\n    // }\n\n    const getNextSession = (cycle, dayNumber) => {\n        // const toFindDay = (dayNumber % cycle?.routineRefs?.length) + 1\n        // const nextSession = cycle?.routineRefs?.find(\n        //     (c) => c?.dayNumber === toFindDay,\n        // )\n        // //TODO: Handle rest day here\n        // if (nextSession?.restDay) {\n        //     return getNextSession(cycle, toFindDay)\n        // } else {\n        //     return nextSession\n        // }\n    }\n    const updateSessions = (data) => {\n        const newSession = {\n            routineRef: data?.routineRef?._id,\n            name: data?.routineRef?.name ?? 'New Session',\n            exercises: data?.routineRef?.exercises ?? [],\n            date: data?.date,\n            userRef: clientId,\n            editing: true,\n            sessionThemeRef: data?.routineRef?.sessionThemeRef,\n        }\n        setSessions([...sessions, newSession])\n    }\n\n    Date.prototype.addDays = function (days) {\n        var date = new Date(this.valueOf())\n        date.setDate(date.getDate() + days)\n        return date\n    }\n    useEffect(() => {\n        if (addErrorMessage) {\n            setTimeout(() => {\n                setAddErrorMessage(false)\n            }, 5000)\n        }\n    }, [addErrorMessage])\n\n    //Function to get data  for both add session and add all sessions\n    const addSessionHelper = () => {\n        // Get timezone offset of the trainer's computer\n        const timezoneOffset = new Date().getTimezoneOffset()\n\n        // Get the current time relative to user timezone\n        const todayTimeWithOffset = new Date(\n            new Date().getTime() + (timezoneOffset - timezone) * 60 * 1000,\n        )\n\n        // Variable definitions to be used\n        let lastSessionDate = todayTimeWithOffset.toISOString()\n        let lastSessionRoutineRef = null\n        let daysToAdd = 0\n        let currentRoutine = null\n        let currentRoutineIndex = 0\n\n        // Find the last session if it exists according to the max date\n        if (sessions.length > 0) {\n            let lastSessionIndex = 0\n            sessions?.forEach((session, ind, array) => {\n                if (\n                    ind > 0 &&\n                    new Date(session?.date) >\n                        new Date(array[lastSessionIndex]?.date)\n                ) {\n                    lastSessionIndex = ind\n                }\n            })\n            lastSessionDate = new Date(sessions[lastSessionIndex]?.date)\n            lastSessionRoutineRef = sessions[lastSessionIndex]?.routineRef\n        }\n\n        // If last completed session exists assign it to the last session date\n        else if (latestCompletedSession) {\n            lastSessionDate = new Date(\n                new Date(latestCompletedSession?.date).getTime() +\n                    timezoneOffset * 60 * 1000,\n            )\n            lastSessionRoutineRef = latestCompletedSession?.routineRef\n        }\n\n        // Case where cycle doesn't exist\n        if (!cycle) {\n            // If a last session (completed/non-completed) exists add 1 day to it's date\n            if (sessions.length > 0 || latestCompletedSession) daysToAdd = 1\n        }\n\n        // Case where cycle exists\n        else {\n            // Sort the cycle as per day number\n            cycle.routineRefs?.sort((a, b) => {\n                return a.dayNumber - b.dayNumber\n            })\n\n            // If a last session (completed/non-completed) exists find the last routine in the current cycle.\n            // If not found, the cycle has been changed otherwise, get the routine after the last routine from the cycle\n            let lastRoutineIndex = null\n            if (lastSessionRoutineRef) {\n                cycle?.routineRefs.forEach((routine, index) => {\n                    // Session with last session id found\n                    if (lastSessionRoutineRef === routine._id) {\n                        // % used to handle case where last routine index is last index of cycle\n                        lastRoutineIndex = index\n                        currentRoutineIndex =\n                            (index + 1) % cycle?.routineRefs.length\n                    }\n                })\n            }\n\n            // If the last routine index exists which implies the cycle hasn't been changed\n            if (lastRoutineIndex != null) {\n                // Days to add is equal to difference in day number of current routine and last routine\n                // This takes into account the rest days as well\n                daysToAdd =\n                    Number(cycle?.routineRefs[currentRoutineIndex].dayNumber) -\n                    Number(cycle?.routineRefs[lastRoutineIndex].dayNumber)\n\n                // If current routine index < last routine index in the case where last routine has last index of cycle\n                if (daysToAdd <= 0) {\n                    daysToAdd += Number(cycle?.totalRoutines)\n                }\n            }\n\n            // If the last routine index doesn't exist which means cycle has been changed\n            // Add 1 day to the last session date\n            else {\n                daysToAdd = Number(\n                    cycle?.routineRefs[currentRoutineIndex].dayNumber,\n                )\n\n                // If latest completed session doesn't exist reduce daysToAdd by 1\n                if (!latestCompletedSession && sessions.length === 0)\n                    daysToAdd -= 1\n            }\n\n            // Final date and routine according to days to add\n            currentRoutine = cycle?.routineRefs[currentRoutineIndex]\n        }\n        let finalDate = new Date(lastSessionDate).addDays(daysToAdd)\n        if (finalDate < todayTimeWithOffset) finalDate = todayTimeWithOffset\n        const obj = {\n            finalDate: finalDate,\n            currentRoutine: currentRoutine,\n            currentRoutineIndex: currentRoutineIndex,\n        }\n        return obj\n    }\n\n    // Function to add single new session\n    const addSession = () => {\n        if (!showAddButton) {\n            setAddErrorMessage(true)\n            return\n        }\n\n        const sessionData = addSessionHelper()\n        updateSessions({\n            routineRef: sessionData?.currentRoutine,\n            date: sessionData?.finalDate,\n        })\n    }\n\n    // Function to add all sessions which are present in the cycle\n    const addAllSessions = async () => {\n        if (!showAddButton) {\n            setAddErrorMessage(true)\n            return\n        }\n\n        setLoading(true)\n        let flag = 1\n        while (flag) {\n            const sessionData = addSessionHelper()\n            await saveCard(sessionData?.finalDate, sessionData?.currentRoutine)\n            if (\n                sessionData?.currentRoutineIndex ===\n                cycle?.routineRefs.length - 1\n            )\n                flag = 0\n        }\n        setLoading(false)\n    }\n\n    const saveCard = async (date, session) => {\n        try {\n            const dateString = new Date(\n                startOfDay(date).getTime() -\n                    (new Date().getTimezoneOffset() - timezone) * 60 * 1000,\n            )\n            let newSession = structuredClone({\n                ...session,\n            })\n            newSession.date = dateString\n            newSession.userRef = clientId\n            newSession.routineRef = newSession._id\n            delete newSession.dayNumber\n            delete newSession._id\n            const response = await axios.post(\n                '/workoutpnp/sessions/add',\n                newSession,\n            )\n            const updatedSession = response?.data\n            const tempSessions = sessions\n            tempSessions.push(updatedSession)\n            setSessions(tempSessions)\n        } catch (error) {\n            setError(true)\n            setLoading(false)\n        }\n    }\n\n    const [show, setShow] = useState(false)\n    return (\n        <>\n            <CustomModal\n                className=\"workout-cycle-modal\"\n                title={'Edit Cycle'}\n                show={show}\n                width=\"fullwidth\"\n                //dark={true}\n                onHide={() => {\n                    setShow(false)\n                }}\n            >\n                <Cycle\n                    clientId={clientId}\n                    setCycle={(cycle) => {\n                        // TODO MAKE Deep Copy. Else if changed in cycle, value changes here as well\n                        if (cycle) {\n                            setCycle(cycle)\n                            setActiveCycleError(false)\n                            setActiveCycleLoading(false)\n                        } else setCycle(false)\n                    }}\n                />\n            </CustomModal>\n            <div className={`workout-remaining-container`}>\n                <div className={`workout-remaining-title`}>Remaining</div>\n                <div\n                    className=\"open-cycle\"\n                    onClick={() => {\n                        setShow(true)\n                    }}\n                >\n                    {activeCycleLoading ? (\n                        <Loader />\n                    ) : activeCycleError || !cycle ? (\n                        <div>{'Please Select a Cycle'}</div>\n                    ) : (\n                        <>\n                            <Icon\n                                icon={'fa6-solid:repeat'}\n                                height={25}\n                                width={25}\n                            />\n                            <div className={`cycle-breif`}>\n                                {/* <div>\n                                    {getNumDaysPerWeek(cycle?.cycleRoutines)}{' '}\n                                    day per week\n                                </div>{' '} */}\n                                <div>Cycle : {cycle?.name}</div>\n                            </div>\n                        </>\n                    )}\n                    <Icon\n                        icon={'clarity:note-edit-line'}\n                        height={25}\n                        width={25}\n                        className=\"edit-icon\"\n                    />\n                </div>\n                <div className=\"d-flex flex-direction-row\">\n                    <Button\n                        disabled={activeCycleError}\n                        type=\"button\"\n                        classNames=\"add-session-btn\"\n                        text={'+ Add'}\n                        onClick={addSession}\n                    />\n                    {cycle && (\n                        <Button\n                            disabled={activeCycleError}\n                            type=\"button\"\n                            classNames=\"add-session-btn add-cycle-session-btn\"\n                            text={'+ Cycle'}\n                            onClick={addAllSessions}\n                        />\n                    )}\n                </div>\n            </div>\n            {addErrorMessage ? (\n                <small className=\"message error\">\n                    Please save current session before adding\n                </small>\n            ) : (\n                <></>\n            )}\n            {loading ? (\n                <Loader />\n            ) : sessions.length == 0 ? (\n                <h5 className=\"d-flex justify-content-center p-4\">\n                    Add a session by clicking the add button above\n                </h5>\n            ) : (\n                <Session\n                    showAddButton={showAddButton}\n                    setAddErrorMessage={setAddErrorMessage}\n                    loading={loading}\n                    error={error}\n                    sessions={sessions}\n                    completed={false}\n                    clientId={clientId}\n                    deleteSession={deleteSession}\n                    sessionThemes={sessionThemes}\n                    setSessions={setSessions}\n                    minDate={minDate}\n                    timezone={timezone}\n                />\n            )}\n        </>\n    )\n}\n\nRemaining.propTypes = { clientId: PropTypes.string }\n\nexport default Remaining\n","import React, { useState, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport Completed from './Completed'\nimport Remaining from './Remaining'\nimport axios from '../../../store/axios-secure'\nimport Loader from '../../Common/Loader'\nimport InternalServerErrorPage from '../../Common/ErrorPage/InternalServerErrorPage'\nimport './index.scss'\nimport ClientContainer from '../Dashboard/ClientView/ClientContainer'\n\nconst Workout = () => {\n    const location = useLocation()\n    const history = useHistory()\n\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(false)\n    const [clientId, setClientId] = useState(0)\n    const [client, setClient] = useState({})\n    const [latestCompletedSession, setLatestCompletedSession] = useState(null)\n\n    const setClientDetails = () => {\n        setClient(['No program', [location.state]])\n        // setLoading(true)\n        // try {\n        //     const response = await axios.get(\n        //         `workout/trainer/suggest/client-list/${clientId}`,\n        //     )\n        //     setClient(response?.data)\n        //     setError(false)\n        //     setLoading(false)\n        // } catch (error) {\n        //     if (error?.response?.status === 400) {\n        //         history.push('/')\n        //     }\n        //     setError('Unable fetch client details, please try again later')\n        //     setLoading(false)\n        // }\n    }\n\n    useEffect(() => {\n        const clientId = location.pathname.split('/')[2]\n        setClientId(clientId)\n        setClientDetails()\n    }, [])\n\n    return loading || clientId === 0 ? (\n        <Loader />\n    ) : error ? (\n        <InternalServerErrorPage />\n    ) : (\n        <div className=\"workout container-xl pb-5\">\n            <ClientContainer\n                showAccordian={false}\n                showBackButton={true}\n                showContainer={false}\n                clientList={[client]}\n                showWorkoutButton={false}\n                showLastWorkout={false}\n            />\n            <Completed\n                clientId={clientId}\n                client={location.state}\n                setLatestCompletedSession={setLatestCompletedSession}\n            />\n            <Remaining\n                clientId={clientId}\n                latestCompletedSession={latestCompletedSession}\n            />\n        </div>\n    )\n}\n\nexport default Workout\n"],"names":["_ref","cycleDropdown","setSelectedCycle","selectedCycleId","addCycle","cloneCycle","showReorder","numDays","cycleOptions","setCycleOptions","useState","client","trainer","world","useEffect","push","globalCycles","allClientsCycle","clientSpecificCycle","getOptions","options","_options$","map","cd","idx","_jsx","className","value","_id","children","name","_jsxs","required","onChange","e","_e$target","target","disabled","_Fragment","Button","classNames","text","onClick","iconComponent","cycleRoutines","selectedDay","setSelectedDay","addWorkout","addRestDay","deleteDay","global","cloneDay","isError","setIsError","setTimeout","cr","concat","dayNumber","Icon","length","height","icon","type","actualCycle","setShowReorderModal","routineRefs","DragDropContext","onDragEnd","result","_result$destination","_result$source","_result$source2","_result$destination2","destination","index","source","removed","splice","forEach","day","ind","Droppable","droppableId","provided","ref","innerRef","droppableProps","Draggable","draggableId","dragHandleProps","draggableProps","placeholder","color","_routine$exercises","_routine$exercises2","routine","setRoutine","exerciseError","exerciseErrorMessage","sessionThemes","isThisClient","workoutTime","setWorkoutTime","selectedSessionTheme","setSelectedSessionTheme","sessionThemeRef","estimatedWorkoutTime","exercises","updatedRoutine","restDay","SessionThemeCard","sessionTheme","filter","SessionThemePicker","slidesToShow","selectedCard","setSelectedCard","breakpoints","evt","_evt$target","changeRoutineName","reduce","sum","curr","_curr$exerciseSets","exerciseSets","SessionTable","setExercises","isEditing","completed","errorMessage","modal","autoPrefill","_selectedCycle$routin2","_selectedCycle$routin3","clientId","setCycle","askForNameModal","setAskForNameModal","askForNameModalMakeActive","setAskForNameModalMakeActive","modalInputDetails","setmodalInputDetails","makeActive","cycle","modalUpdatedCycleDetails","setModalUpdatedCycleDetails","setCycleDropdown","setSelectedCycleId","showSelectCycle","setShowSelectCycle","selectedCycle","isExerciseError","setIsExerciseError","setExerciseErrorMessage","message","loadingCycle","setLoadingCycle","errorOption","setErrorOptions","errorCycle","setErrorCycle","setErrorMessage","isMakeActive","setIsMakeActive","setIsThisClient","clientCycle","setClientCycle","isModalError","setIsModalError","isSuccess","setIsSuccess","setSessionThemes","showDeleteModal","setShowDeleteModal","showReorderModal","currentUser","auth","fetchCycleOptions","async","_sessionThemesRespons","_response$data","response","axios","get","sessionThemesResponse","data","allCycles","cycleRef","id","_response$data2","_allCycles$","_response$data3","error","sortedCycle","cycleDetails","_sortedCycle$routineR","sort","cr1","cr2","dayNum","_cr$exercises","ce","_ce$exerciseSets","s1","s2","number","s","newRoutineRefs","i","_sortedCycle$routineR2","daysDifferenceCount","totalRoutines","getSortedData","find","element","err","fetchCycleDetails","userRef","addDay","isRestDay","updatedCycle","addNewCycle","isCycleNameUnique","found","_modalInputDetails$cy","_modalInputDetails$cy2","_routine$exercises4","exercise","Math","random","newCycle","isActive","updatedCyclesOptions","_updatedCyclesOptions","_updatedCyclesOptions2","saveCurrentCycle","_newCycle$routineRefs","put","isValid","_selectedCycle$routin","names","_routine$exercises3","undefined","exerciseInfoRef","_exercise$exerciseSet","suggestedWeightRange","parseInt","suggestedRepRange","suggestedRIRRange","Set","size","cycleToUpload","JSON","parse","stringify","routines","_routine$exercises5","_response$data4","post","_response$data5","ErrorPage","Loader","CycleHeader","getNumDaysPerWeek","structuredClone","DaysHeader","_updatedCycle$routine","clonedDay","DayDetails","updateRoutine","checked","class","CustomModal","title","show","onHide","width","dark","_err$response","status","closeReordered","_updatedCycle$routine2","ReorderDaysHeader","latestCompletedSession","sessions","setSessions","loading","setLoading","setError","activeCycleLoading","setActiveCycleLoading","activeCycleError","setActiveCycleError","showAddButton","setShowAddButton","addErrorMessage","setAddErrorMessage","minDate","setMinDate","timezone","setTimezone","_response$data$sessio","updatedSessions","w1","w2","Date","date","tempTimezone","offset","session","fetchRemainingCardsData","fetchActiveCycle","editing","timezoneOffset","getTimezoneOffset","tempMinDate","getTime","latestCompletedSessionDate","startOfDay","toISOString","setDate","getDate","minDateFunction","prototype","addDays","days","this","valueOf","addSessionHelper","todayTimeWithOffset","lastSessionDate","lastSessionRoutineRef","daysToAdd","currentRoutine","currentRoutineIndex","_sessions$lastSession","_sessions$lastSession2","lastSessionIndex","array","_array$lastSessionInd","routineRef","_cycle$routineRefs","a","b","lastRoutineIndex","Number","finalDate","saveCard","dateString","newSession","updatedSession","tempSessions","setShow","Cycle","addSession","sessionData","_data$routineRef","_data$routineRef$name","_data$routineRef2","_data$routineRef$exer","_data$routineRef3","_data$routineRef4","updateSessions","flag","Session","deleteSession","sessionUpdated","Workout","location","useLocation","useHistory","setClientId","setClient","setLatestCompletedSession","pathname","split","state","InternalServerErrorPage","ClientContainer","showAccordian","showBackButton","showContainer","clientList","showWorkoutButton","showLastWorkout","Completed","Remaining"],"sourceRoot":""}