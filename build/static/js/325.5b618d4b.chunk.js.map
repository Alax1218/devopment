{"version":3,"file":"static/js/325.5b618d4b.chunk.js","mappings":"gOAQA,MAmDA,EAnDmBA,KACf,MAAOC,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAS,KAChDC,EAAOC,IAAYF,EAAAA,EAAAA,aACnBG,EAASC,IAAcJ,EAAAA,EAAAA,aACxB,WAAEK,EAAU,cAAEC,IAAkBC,EAAAA,EAAAA,YAAWC,EAAAA,IASjDC,EAAAA,EAAAA,YAAU,KARcC,WACpB,IACI,MAAMC,QAAiBC,EAAAA,EAAMC,IAAI,mBACjCP,EAAc,CAAC,CAACD,EAAW,GAAG,GAAY,OAARM,QAAQ,IAARA,OAAQ,EAARA,EAAUG,OAChD,CAAE,MAAOb,GACLC,EAAS,mDACb,GAGAa,EAAiB,GAClB,IAmBH,MAAMC,GACFC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uCAAsCC,UACjDF,EAAAA,EAAAA,KAACG,EAAAA,EAAe,CACZC,eAAe,EACfC,gBAAgB,EAChBjB,WAAYA,EACZkB,eAAe,EACfC,mBAAmB,EACnBC,gBAAgB,EAChBC,iBAAiB,MAK7B,OAAOvB,GAAUc,EAAAA,EAAAA,KAACU,EAAAA,EAAM,IAAM1B,GAAQgB,EAAAA,EAAAA,KAACW,EAAAA,EAAmB,IAAMZ,CAAW,E,cCjD/E,MA6CA,EA3CyBa,KACrB,MAAMC,GAAcvB,EAAAA,EAAAA,YAAWC,EAAAA,GACzBuB,GAAUC,EAAAA,EAAAA,MAOhB,OALAvB,EAAAA,EAAAA,YAAU,KACDqB,EAAYG,YACbF,EAAQG,KAAK,sBACjB,GACD,CAACJ,EAAYG,cAcZhB,EAAAA,EAAAA,KAAAkB,EAAAA,SAAA,CAAAhB,SACKW,EAAYM,UACTnB,EAAAA,EAAAA,KAACpB,EAAU,KAEXwC,EAAAA,EAAAA,MAAA,OAAAlB,SAAA,EACIF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gCAA+BC,UAC1CF,EAAAA,EAAAA,KAAA,OAAKqB,IA7BzB,8DA6B4CC,OAAO,QAAQC,MAAM,aAEjDH,EAAAA,EAAAA,MAAA,MAAInB,UAAU,0CAAyCC,SAAA,CAAC,uBAC/B,WAQlC,C","sources":["components/Trainer/Dashboard/ClientView/index.jsx","components/Trainer/Dashboard/index.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport Loader from '../../../Common/Loader'\nimport InternalServerError from '../../../Common/ErrorPage/InternalServerErrorPage'\nimport axios from '../../../../store/axios-secure'\nimport ClientContainer from './ClientContainer'\nimport './index.scss'\nimport AppContext from '../../../../store/context'\n\nconst ClientView = () => {\n    const [finalClientList, setFinalClientList] = useState([])\n    const [error, setError] = useState()\n    const [loading, setLoading] = useState()\n    const { clientList, setClientList } = useContext(AppContext)\n    const fetchClientList = async () => {\n        try {\n            const response = await axios.get('/trainers/users')\n            setClientList([[clientList[0][0], response?.data]])\n        } catch (error) {\n            setError('unable fetch client list, please try again later')\n        }\n    }\n    useEffect(() => {\n        fetchClientList()\n    }, [])\n    // useEffect(() => {\n    //     let newClientList = JSON.parse(JSON.stringify(clientList))\n    //     let finalList = {\n    //         NoProgram: [],\n    //     }\n    //     newClientList.forEach((client) => {\n    //         if (client?.currentProgramName) {\n    //             let newGroup = finalList[client.currentProgramName] || []\n    //             newGroup.push(client)\n    //             finalList[client.currentProgramName] = newGroup\n    //         } else {\n    //             let newGroup = finalList['NoProgram'] || []\n    //             newGroup.push(client)\n    //             finalList['NoProgram'] = newGroup\n    //         }\n    //     })\n    //     setFinalClientList(finalList)\n    // }, [clientList])\n    const displayData = (\n        <div className=\"main-dashboard-container padding-top\">\n            <ClientContainer\n                showAccordian={true}\n                showBackButton={false}\n                clientList={clientList}\n                showContainer={true}\n                showWorkoutButton={true}\n                showStepsCount={true}\n                showLastWorkout={true}\n            />\n        </div>\n    )\n\n    return loading ? <Loader /> : error ? <InternalServerError /> : displayData\n}\n\nexport default ClientView\n","import React, { useContext, useEffect } from 'react'\nimport InComponentNavBar from '../../Common/InComponentNavBar'\nimport ClientView from './ClientView'\nimport FeedbackView from './FeedbackView'\nimport AppContext from '../../../store/context'\nimport { useHistory } from 'react-router-dom'\n\nconst waitingImage =\n    'https://storage.googleapis.com/evolv-assets/MVP/waiting.png'\nconst TrainerDashboard = () => {\n    const userContext = useContext(AppContext)\n    const history = useHistory()\n\n    useEffect(() => {\n        if (!userContext.profileRef) {\n            history.push('/trainer-onboarding')\n        }\n    }, [userContext.profileRef])\n    return (\n        // <InComponentNavBar\n        //     navitems={[\n        //         {\n        //             title: 'Clients',\n        //             component: <ClientView />,\n        //         },\n        //         {\n        //             title: 'Feedback',\n        //             component: <FeedbackView />,\n        //         },\n        //     ]}\n        // />\n        <>\n            {userContext.verified ? (\n                <ClientView />\n            ) : (\n                <div>\n                    <div className=\"d-flex justify-content-center\">\n                        <img src={waitingImage} height=\"200px\" width=\"200px\" />\n                    </div>\n                    <h1 className=\"d-flex justify-content-center pt-5 pb-3\">\n                        Verification Pending{' '}\n                    </h1>\n                    {/* <h5 className=\"d-flex justify-content-center p-5\">\n                        Meanwhile, complete your profile by clicking on your\n                        profile picture at the top right corner\n                    </h5> */}\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default TrainerDashboard\n"],"names":["ClientView","finalClientList","setFinalClientList","useState","error","setError","loading","setLoading","clientList","setClientList","useContext","AppContext","useEffect","async","response","axios","get","data","fetchClientList","displayData","_jsx","className","children","ClientContainer","showAccordian","showBackButton","showContainer","showWorkoutButton","showStepsCount","showLastWorkout","Loader","InternalServerError","TrainerDashboard","userContext","history","useHistory","profileRef","push","_Fragment","verified","_jsxs","src","height","width"],"sourceRoot":""}