{"version":3,"file":"static/js/828.126b04af.chunk.js","mappings":"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","sources":["components/Common/ErrorPage/InternalServerErrorPage.jsx","components/Common/Form/ListOfValues.jsx","components/Common/Form/PreviewCardContainer/index.jsx","components/Common/Form/Form.jsx","components/Common/Form/PreviewCardContainer/TemplateCard/index.jsx","components/Profile/Components/AccountHeader/index.jsx","components/Trainer/TrainerOnboarding/TrainerOnboardingForm.jsx","components/Trainer/TrainerOnboarding/index.jsx"],"sourcesContent":["import React from 'react'\nimport ErrorPage from './index'\nimport './index.scss'\n\nconst InternalServerErrorPage = () => {\n    return <ErrorPage errorType={'500'} />\n}\n\nexport default InternalServerErrorPage\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport InputBox from './InputBox'\nimport DynamicDropdown from './DynamicDropdown'\n\nconst ListOfValues = ({\n    darkTheme = false,\n    register,\n    control,\n    helper,\n    fieldKey,\n    subFields,\n    placeholder,\n    size,\n}) => {\n    const [indexes, setIndexes] = useState([])\n    const [counter, setCounter] = useState(0)\n\n    const addRow = () => {\n        setIndexes((prevIndexes) => [...prevIndexes, counter])\n        setCounter((prevCounter) => prevCounter + 1)\n    }\n\n    const clearRows = () => {\n        setIndexes([])\n        setCounter(0)\n    }\n\n    useEffect(() => {\n        let indexList = []\n        let count = 0\n        for (let index = 0; index < size; index++) {\n            indexList.push(index)\n            count++\n        }\n        setIndexes(indexList)\n        setCounter(count)\n    }, [])\n\n    return (\n        <>\n            <div className=\"row\">\n                {indexes.map((index, k) => {\n                    const fieldName = `${fieldKey}[${index}]`\n\n                    return (\n                        <div key={k} className=\"col-md-6\">\n                            <fieldset name={fieldName} key={fieldName}>\n                                {subFields.map((value, idx) => {\n                                    if (value.type === 'dynamic-dropdown') {\n                                        return (\n                                            <DynamicDropdown\n                                                defaultOptions={value.options}\n                                                name={`${fieldName}.${value.fieldName}`}\n                                                // errorClassName={\n                                                //     errors[value.fieldName]\n                                                //         ? 'is-invalid'\n                                                //         : ''\n                                                // }\n                                                control={control}\n                                                multi={value.multi}\n                                                canCreate={value.canCreate}\n                                            />\n                                        )\n                                    } else {\n                                        return (\n                                            <div key={idx} className=\"p-2\">\n                                                <InputBox\n                                                    label={value.label}\n                                                    type={value.type}\n                                                    placeholder={\n                                                        value.placeholder\n                                                    }\n                                                    name={`${fieldName}.${value.fieldName}`}\n                                                    refValue={register({\n                                                        required:\n                                                            value.required,\n                                                        ...value?.validation,\n                                                    })}\n                                                    id={value.id}\n                                                    readOnly={value.disabled}\n                                                    labelClass={\n                                                        value.labelClass\n                                                    }\n                                                    inputLabel={\n                                                        value.inputLabel\n                                                    }\n                                                    divClassNames={\n                                                        value.divClassNames\n                                                    }\n                                                    darkTheme={darkTheme}\n                                                    inputClassNames={\n                                                        value.inputClassNames\n                                                    }\n                                                />\n                                            </div>\n                                        )\n                                    }\n                                })}\n                            </fieldset>\n                        </div>\n                    )\n                })}\n            </div>\n            <button\n                type=\"button\"\n                className=\"m-1 btn btn-primary small-btn p-2\"\n                onClick={addRow}\n            >\n                Add {placeholder}\n            </button>\n            <button\n                type=\"button\"\n                className=\"m-1 btn btn-danger small-btn p-2\"\n                onClick={clearRows}\n            >\n                Clear {placeholder}\n            </button>\n            <small className=\"form-text text-muted\">{helper}</small>\n        </>\n    )\n}\n\nListOfValues.propTypes = {\n    darkTheme: PropTypes.bool,\n    register: PropTypes.func,\n    control: PropTypes.func,\n    helper: PropTypes.string,\n    fieldKey: PropTypes.string,\n    subFields: PropTypes.object,\n    placeholder: PropTypes.string,\n    size: PropTypes.number,\n}\n\nexport default ListOfValues\n","import React from 'react'\nimport './index.scss'\nimport PreviewCard from './PreviewCard'\nimport TemplateCard from './TemplateCard'\n\nconst TempCard1 =\n    'https://storage.googleapis.com/evolv-mobile/trainers/swadhintrainer.png'\n\nconst TempCard2 =\n    'https://storage.googleapis.com/evolv-mobile/trainers/anasmithtrainer.png'\nconst PreviewCardContainer = ({ props, register, setValue }) => {\n    return (\n        <div className=\"preview-container\">\n            <div className=\"col-md-7 preview-container-left\">\n                <h3 className=\"heading\">Template Cards</h3>\n                <div className=\"template-cards-container\">\n                    <TemplateCard\n                        name=\"Swadhin Saraf\"\n                        imgUrl={TempCard1}\n                        peopleTrained={204}\n                        tagline=\"INFS Certified\"\n                        colorIndex={8}\n                    />\n                    <TemplateCard\n                        name=\"Ana Smith\"\n                        imgUrl={TempCard2}\n                        peopleTrained={285}\n                        tagline=\"Fat Loss Expert\"\n                        colorIndex={5}\n                    />\n                    {/* <img src={TempCard1} alt=\"no-image\" />\n                    <img src={TempCard2} alt=\"no-image\" /> */}\n                </div>\n            </div>\n            <div className=\"col-md-5 preview-container-right\">\n                <h3 className=\"heading\">Your Card</h3>\n                <div className=\"template-cards-container\">\n                    <PreviewCard\n                        register={register}\n                        setValue={setValue}\n                        idx={props.color}\n                        value={props}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PreviewCardContainer\n","import React, { useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport PropTypes from 'prop-types'\nimport axios from '../../../store/axios-secure'\nimport ListOfValues from './ListOfValues'\nimport Loader from '../../Common/Loader'\nimport ErrorPage from '../../Common/ErrorPage/InternalServerErrorPage'\nimport Button from '../Button'\nimport InputBox from './InputBox'\nimport TextArea from './TextArea'\nimport StarRating from '../StarRating'\nimport DynamicDropdown from './DynamicDropdown'\nimport GenderSelection from './GenderSelection'\nimport UploadFileButton from './UploadFileButton'\nimport './index.scss'\nimport ColorSelector from './ColorSelector'\nimport { Transformations } from './Transformations'\nimport PreviewCardContainer from './PreviewCardContainer'\nimport DatePickerComponent from './DatePicker'\n\nconst Form = ({\n    formDetails,\n    postUrl,\n    formName,\n    formIcon,\n    showTitle = true,\n    darkTheme = false,\n    defaultValues,\n    requestType = 'post',\n    saveButtonText,\n    classNames = '',\n    saveForLater = false,\n    previewCard = false,\n    transformations,\n    setTransformations,\n    callback = () => {},\n    modifier = (data) => {\n        return data\n    },\n}) => {\n    const [isLoading, setIsLoading] = useState(false)\n    const [isError, setIsError] = useState(false)\n    const [error, setError] = useState()\n    const [submittedData, setSubmittedData] = useState({})\n    const getDefaultForm = () => {\n        // console.log(defaultValues)\n\n        let defaultKeyValues = {}\n\n        if (defaultValues) {\n            // console.log(defaultValues)\n            // Unflatten list\n            Object.values(formDetails).forEach((value) => {\n                const keyName = value.idFieldName\n                    ? value.idFieldName\n                    : value.fieldName\n\n                if (value.type === 'flatlist') {\n                    defaultKeyValues[value.fieldName] = defaultValues[\n                        keyName\n                    ].map((v) => {\n                        return {\n                            [value.subFields[0].fieldName]: v,\n                        }\n                    })\n                } else if (\n                    value.type === 'dynamic-dropdown' &&\n                    value.multi &&\n                    defaultValues[keyName].length > 0 &&\n                    typeof defaultValues[keyName][0] === 'object'\n                ) {\n                    defaultKeyValues[value.fieldName] = defaultValues[\n                        keyName\n                    ].map((value) => value.id)\n                } else {\n                    defaultKeyValues[value.fieldName] = defaultValues[keyName]\n                }\n            })\n\n            return defaultKeyValues\n        }\n\n        formDetails.forEach((value) => {\n            if (value.type === 'checkbox') {\n                defaultKeyValues[value.fieldName] = false\n            } else {\n                defaultKeyValues[value.fieldName] = ''\n            }\n        })\n\n        return defaultKeyValues\n    }\n\n    const textColour = darkTheme ? 'text-white' : 'text-black'\n\n    const {\n        register,\n        handleSubmit,\n        control,\n        errors,\n        reset,\n        setValue,\n        getValues,\n        watch,\n        formState: { isSubmitSuccessful },\n    } = useForm({\n        defaultValues: getDefaultForm(),\n    })\n    const allFields = watch()\n    console.log(allFields)\n    useEffect(() => {\n        if (isSubmitSuccessful) {\n            reset(getDefaultForm())\n        }\n    }, [isSubmitSuccessful, submittedData, reset])\n    useEffect(() => {\n        if (allFields?.phoneNumber?.length > 10) {\n            setValue('phoneNumber', allFields?.phoneNumber?.slice(0, 10))\n        }\n        if (allFields?.experience?.length > 2) {\n            setValue('experience', allFields?.experience?.slice(0, 2))\n        }\n        if (allFields?.tagline?.length > 20) {\n            setValue('phoneNumber', allFields?.tagline?.slice(0, 20))\n        }\n        if (allFields?.peopleTrained?.length > 5) {\n            setValue('peopleTrained', allFields?.peopleTrained?.slice(0, 5))\n        }\n    }, [allFields])\n    const onSubmit = async (data) => {\n        await saveData(data)\n        setSubmittedData(data)\n        setIsLoading(false)\n    }\n\n    const saveData = async (dataM) => {\n        setIsLoading(true)\n        // TODO Investigate why Null is there\n        // TODO Remove Button Uncomment\n        // Remove Nulls for list and flatlist\n        const data = await modifier(dataM) //modify form data\n\n        // Object.values(formDetails).forEach((value) => {\n        //     if (value.type === 'flatlist' || value.type === 'list') {\n        //         data[value.fieldName] = data[value.fieldName]?.filter(\n        //             (d) => d !== null,\n        //         )\n        //     }\n        // })\n\n        // // Flatten flatlist\n        // Object.values(formDetails).forEach((value) => {\n        //     if (value.type === 'flatlist') {\n        //         data[value.fieldName] = data[value.fieldName]?.map(\n        //             (v) => v[value.subFields[0].fieldName],\n        //         )\n        //     }\n        // })\n\n        try {\n            if (requestType === 'post') {\n                const response = await axios.post(postUrl, data, {\n                    headers: {\n                        // 'Content-Type': `multipart/form-data; boundary=${data.getBoundary()}`,\n                        'Content-Type': `multipart/form-data;`,\n                    },\n                })\n                // TODO make changes to all the callbacks, like the one below\n                callback(response.data)\n            } else if (requestType === 'put') {\n                const response = await axios.put(postUrl, data)\n                callback({ response: response?.data, data: data })\n            } else if (requestType === 'get') {\n                callback(data)\n            }\n        } catch (err) {\n            setError(err?.response?.data?.message)\n            setIsError(true)\n        }\n    }\n\n    const getFormDetails = () => {\n        const formInputs = formDetails?.map((value, index) => {\n            if (value.type === 'hidden-text') {\n                return (\n                    <input\n                        key={index}\n                        type={'text'}\n                        className={`${\n                            errors[value.fieldName] ? 'is-invalid' : ''\n                        }`}\n                        name={value.fieldName}\n                        ref={register({ required: value.required })}\n                        hidden\n                    />\n                )\n            } else if (value.type === 'list' || value.type === 'flatlist') {\n                let size\n                if (\n                    defaultValues &&\n                    defaultValues[value.fieldName] &&\n                    defaultValues[value.fieldName].length\n                )\n                    size = defaultValues[value.fieldName].length\n                else size = 0\n                return (\n                    <div className={`p-2 ${value.classNames}`} key={index}>\n                        <ListOfValues\n                            darkTheme={darkTheme}\n                            register={register}\n                            control={control}\n                            helper={value.helper}\n                            fieldKey={value.fieldName}\n                            subFields={value.subFields}\n                            placeholder={value.placeholder}\n                            size={size}\n                        />\n                    </div>\n                )\n            } else if (value.type === 'dynamic-dropdown') {\n                return (\n                    <div className={`p-2 ${value.classNames}`} key={index}>\n                        <DynamicDropdown\n                            defaultOptions={value.options}\n                            placeholder={value.placeholder}\n                            name={value.fieldName}\n                            errorClassName={\n                                errors[value.fieldName] ? 'is-invalid' : ''\n                            }\n                            control={control}\n                            multi={value.multi}\n                            canCreate={value.canCreate}\n                            maxOptions={value.maxOptions}\n                            maxCharLength={value.maxCharLength}\n                            required={value.required}\n                            minOptions={value?.minOptions}\n                        />\n\n                        {errors[value.fieldName] && (\n                            <small\n                                id=\"firstNameHelp\"\n                                className=\"form-text text-danger\"\n                            >\n                                {value?.validation?.errorMessage}\n                            </small>\n                        )}\n                        <small\n                            id={value.fieldName + 'Help'}\n                            className=\"form-text text-muted\"\n                        >\n                            {value.helper}\n                        </small>\n                    </div>\n                )\n            } else if (value.type === 'upload-button') {\n                let isRequired = false\n                if (value.required) {\n                    isRequired = true\n                } else if (\n                    // TODO write something better for this\n                    value.requiredDependsOn &&\n                    getValues(value.requiredDependsOn)?.length > 0\n                ) {\n                    isRequired = true\n                }\n\n                return (\n                    <div className={`p-2 ${value.classNames}`} key={index}>\n                        <UploadFileButton\n                            name={value.fieldName}\n                            refValue={register({\n                                required: isRequired,\n                                ...value?.validation,\n                            })}\n                            acceptableFileExtensions={\n                                value.acceptableFileExtensions\n                            }\n                            isError={errors[value.fieldName]}\n                            id={value.fieldName}\n                            buttonText={value?.buttonText}\n                            onChange={value.onChange}\n                            required={value.required}\n                        />\n                    </div>\n                )\n            } else if (value.type === 'gender-selection') {\n                // TODO Move somewhere else, or make it generic\n                return (\n                    <div className={`p-2 ${value.classNames}`} key={index}>\n                        <GenderSelection register={register} />\n                    </div>\n                )\n            } else if (value.type === 'color-selection') {\n                return (\n                    <div className={`p-2 ${value.classNames}`} key={index}>\n                        <ColorSelector\n                            setValue={setValue}\n                            register={register}\n                        />\n                    </div>\n                )\n            } else if (value.type === 'date-picker') {\n                return (\n                    <DatePickerComponent\n                        label={value.label}\n                        classNames={value.classNames}\n                        key={index}\n                        register={register}\n                    />\n                )\n            } else if (value.type === 'transformations') {\n                return (\n                    <Transformations\n                        key={index}\n                        transformations={transformations}\n                        setTransformations={setTransformations}\n                    />\n                )\n            } else if (value.type === 'checkbox') {\n                return (\n                    <div className={`p-2 ${value.classNames}`} key={index}>\n                        <input\n                            type={value.type}\n                            placeholder={value.placeholder}\n                            name={value.fieldName}\n                            ref={register({ required: value.required })}\n                            readOnly={value.disabled}\n                        />\n                        <small\n                            id={value.fieldName + 'Help'}\n                            className=\"form-text text-muted\"\n                        >\n                            {value.helper}\n                        </small>\n                    </div>\n                )\n            } else if (value.type === 'textarea') {\n                return (\n                    <div className={`p-2 ${value.classNames}`} key={index}>\n                        <TextArea\n                            divClassNames={value.divClassNames}\n                            labelClass={value.labelClass}\n                            label={value.label}\n                            name={value.fieldName}\n                            rows=\"4\"\n                            cols=\"50\"\n                            placeholder={value.placeholder}\n                            refValue={register({\n                                required: value.required,\n                                ...value?.validation,\n                            })}\n                            inputClassNames={value.inputClassNames}\n                        />\n                        {errors[value.fieldName] && (\n                            <small\n                                id=\"firstNameHelp\"\n                                className=\"form-text text-danger\"\n                            >\n                                {value?.validation?.errorMessage}\n                            </small>\n                        )}\n                        <small\n                            id={value.fieldName + 'Help'}\n                            className=\"form-text text-muted\"\n                        >\n                            {value.helper}\n                        </small>\n                    </div>\n                )\n            } else if (value.type === 'star-rating') {\n                return (\n                    <div key={index}>\n                        <input\n                            name={value.fieldName}\n                            type=\"hidden\"\n                            ref={register({\n                                required: value.required,\n                                ...value?.validation,\n                            })}\n                        />\n                        <div className={`p-2 ${value.classNames}`} key={index}>\n                            <StarRating\n                                edit={true}\n                                reverse={value.reverse}\n                                size={value.size}\n                                isHalf={false}\n                                star={defaultValues?.star}\n                                showNumber={value.showNumber}\n                                onChange={(data) => {\n                                    setValue(value.fieldName, data)\n                                }}\n                            />\n                            {errors[value.fieldName] && (\n                                <small\n                                    id=\"firstNameHelp\"\n                                    className=\"form-text text-danger\"\n                                >\n                                    {value?.validation?.errorMessage}\n                                </small>\n                            )}\n                        </div>\n                    </div>\n                )\n            } else {\n                return (\n                    <div className={`p-2 ${value.classNames}`} key={index}>\n                        <InputBox\n                            label={value.label}\n                            errorClassName={\n                                errors[value.fieldName] ? 'is-invalid' : ''\n                            }\n                            type={value.type}\n                            placeholder={value.placeholder}\n                            name={value.fieldName}\n                            refValue={register({\n                                required: value.required,\n                                ...value?.validation,\n                            })}\n                            required={value.required}\n                            readOnly={value.disabled}\n                            labelClass={value.labelClass}\n                            inputLabel={value.inputLabel}\n                            divClassNames={value.divClassNames}\n                            darkTheme={darkTheme}\n                            inputClassNames={value.inputClassNames}\n                            maxLength={value.maxLength}\n                        />\n                        {errors[value.fieldName] && (\n                            <small\n                                id=\"firstNameHelp\"\n                                className=\"form-text text-danger\"\n                            >\n                                {value?.validation?.errorMessage}\n                            </small>\n                        )}\n                        <small\n                            id={value.fieldName + 'Help'}\n                            className=\"form-text text-muted\"\n                        >\n                            {value.helper}\n                        </small>\n                    </div>\n                )\n            }\n        })\n\n        return (\n            <>\n                <small className=\"message error\">\n                    All required fields are marked as *\n                </small>\n                <form onSubmit={handleSubmit(onSubmit)} className={classNames}>\n                    <div className=\"row\">\n                        {formInputs}\n                        {previewCard ? (\n                            <PreviewCardContainer\n                                props={allFields}\n                                register={register}\n                                setValue={setValue}\n                            />\n                        ) : (\n                            <></>\n                        )}\n                        <div className=\"d-flex\">\n                            {isLoading ? (\n                                <Button\n                                    classNames=\"my-3\"\n                                    text={\n                                        <span className=\"spinner-border spinner-border-sm\"></span>\n                                    }\n                                    color=\"green\"\n                                />\n                            ) : (\n                                <Button\n                                    type=\"submit\"\n                                    classNames=\"my-3\"\n                                    text={saveButtonText || 'Submit'}\n                                    icon={formIcon}\n                                    color=\"green\"\n                                />\n                            )}\n                        </div>\n                    </div>\n                </form>\n            </>\n        )\n    }\n\n    const displayData = (\n        <>\n            {showTitle && <h4 className={textColour}>{formName} Form</h4>}\n            {getFormDetails()}\n        </>\n    )\n\n    return (\n        <div>\n            {isLoading ? (\n                <Loader />\n            ) : isError ? (\n                <ErrorPage text={error} />\n            ) : (\n                displayData\n            )}\n        </div>\n    )\n}\n\nForm.propTypes = {\n    formDetails: PropTypes.array,\n    postUrl: PropTypes.string,\n    formName: PropTypes.string,\n    formIcon: PropTypes.string,\n    showTitle: PropTypes.bool,\n    darkTheme: PropTypes.bool,\n    defaultValues: PropTypes.array,\n    requestType: PropTypes.string,\n    saveButtonText: PropTypes.string,\n    callback: PropTypes.func,\n    classNames: PropTypes.string,\n}\n\nexport default Form\n","import React, { useState } from 'react'\nimport UploadFileButton from '../../UploadFileButton'\nimport StarRating from '../../../StarRating'\nimport { previewCardColorPalette } from '../../../../../constants/Colors'\nimport './index.scss'\n\nconst defaultPicture =\n    'https://storage.googleapis.com/evolv-assets/trainers/default.png'\n\nconst TemplateCard = ({\n    name,\n    imgUrl,\n    tagline,\n    colorIndex,\n    peopleTrained,\n    rating = 4.5,\n}) => {\n    let color = previewCardColorPalette[colorIndex].dark ? 'white' : 'black'\n    return (\n        <div\n            style={{\n                backgroundColor: previewCardColorPalette[colorIndex].themeColor,\n                color: color,\n            }}\n            className=\"template-card-container\"\n        >\n            <div className=\"left\">\n                <img\n                    className=\"trainer-image\"\n                    src={imgUrl ?? defaultPicture}\n                    alt=\"\"\n                />\n            </div>\n            <div className=\"right\">\n                <p className=\"name\">{name}</p>\n                <StarRating\n                    size=\"v-small\"\n                    star={rating}\n                    edit={false}\n                    align={'center'}\n                    reverse\n                    count={1}\n                />\n                <p className=\"tagline\">{tagline}</p>\n                <p className=\"people-trained-text\">{peopleTrained}</p>\n                <p className=\"people-trained\">people trained</p>\n            </div>\n        </div>\n    )\n}\n\nexport default TemplateCard\n","import React, { useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport './index.scss'\nimport auth from '../../../../firebase-config'\nimport { useContext } from 'react'\nimport AppContext from '../../../../store/context'\n\nconst DefaultProfileIcon =\n    'https://storage.googleapis.com/evolv-store/icons/auth/profile.jpg'\n\nconst AccountHeader = ({ classNames = '' }) => {\n    const { currentUser } = auth\n    const userContext = useContext(AppContext)\n    return (\n        <>\n            <div className={`profile-image-text ${classNames}`}>\n                <div className=\"profile-container\">\n                    <img\n                        className=\"profile-image\"\n                        src={userContext?.profilePicture}\n                    />\n                </div>\n\n                <div className=\"name-container\">\n                    <h6 className=\"fullname\">{currentUser?.displayName}</h6>\n                    <p className=\"username\">{currentUser?.email}</p>\n                </div>\n            </div>\n        </>\n    )\n}\n\nAccountHeader.propTypes = {\n    classNames: PropTypes.string,\n}\n\nexport default AccountHeader\n","/* eslint-disable no-unused-vars */\nimport React, { forwardRef, useEffect, useState, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport Form from '../../Common/Form/Form'\nimport axios from '../../../store/axios-secure'\nimport Loader from '../../Common/Loader'\nimport ErrorPage from '../../Common/ErrorPage/InternalServerErrorPage'\nimport { useHistory } from 'react-router'\nimport AppContext from '../../../store/context'\n\nconst Onboarding = () => {\n    const [isError, setIsError] = useState(false)\n    const [isLoading, setIsLoading] = useState(true)\n    const [error, setError] = useState('')\n    const [form, setForm] = useState([])\n    const [transformations, setTransformations] = useState([])\n    const history = useHistory()\n    const userContext = useContext(AppContext)\n\n    const trainerOnboardingForm = [\n        {\n            label: 'Phone no.',\n            type: 'number',\n            placeholder: 'Enter your 10 digit Phone no.',\n            fieldName: 'phoneNumber',\n            required: true,\n            classNames: 'col-lg-6 col-md-12',\n            inputClassNames: 'white-border',\n            inputLabel: '+91',\n            labelClass: 'phone',\n            validation: {\n                required: true,\n                minLength: 10,\n                errorMessage: 'Please Enter a valid phone number',\n                maxLength: 10,\n            },\n            maxLength: 10,\n        },\n        {\n            label: 'DOB',\n            type: 'date-picker',\n            classNames: 'col-lg-3 col-md-4',\n            required: true,\n        },\n        {\n            type: 'gender-selection',\n            classNames: 'col-lg-3 col-md-6',\n        },\n        {\n            label: 'Experience',\n            type: 'number',\n            fieldName: 'experience',\n            placeholder: 'Select yrs. of experience',\n            classNames: 'col-md-6',\n            inputClassNames: 'white-border',\n            labelClass: 'experience',\n            maxLength: 2,\n        },\n        {\n            label: 'People Trained',\n            type: 'number',\n            fieldName: 'peopleTrained',\n            placeholder: 'Approx. People Trained',\n            classNames: 'col-md-6',\n            inputClassNames: 'white-border',\n            labelClass: 'experience',\n            maxLength: 5,\n        },\n        {\n            label: 'Expertise',\n            type: 'dynamic-dropdown',\n            fieldName: 'expertise',\n            canCreate: true,\n            classNames: 'col-md-8',\n            placeholder: 'Select your expertise',\n            multi: true,\n            options: [],\n            maxCharLength: 15,\n            required: true,\n            maxOptions: 3,\n            minOptions: 1,\n            validation: {\n                errorMessage: 'Please enter between 1 to 3 expertise',\n            },\n        },\n        {\n            type: 'upload-button',\n            fieldName: 'proofFile',\n            buttonText: 'Aadhar Card(Front & Back) in pdf',\n            acceptableFileExtensions: ['.pdf'],\n            classNames: 'col-md-4',\n            required: true,\n            onChange: (e) => {\n                if (e.target.files[0].type !== 'application/pdf') {\n                    return 'Please upload a valid pdf file'\n                } else if (e.target.files[0].size > 5000000) {\n                    return 'Please upload a file less than 5MB.'\n                }\n                return null\n            },\n        },\n        {\n            label: 'Certificate',\n            type: 'dynamic-dropdown',\n            fieldName: 'certificateName',\n            canCreate: true,\n            classNames: 'col-md-8',\n            //inputContainerClass: 'certificate-input-container',\n            placeholder: 'Select your Certification',\n            options: [],\n            maxCharLength: 20,\n            validation: {\n                errorMessage: 'Please enter valid name',\n            },\n        },\n        {\n            type: 'upload-button',\n            fieldName: 'certificateFile',\n            buttonText: 'Upload Your Certificate',\n            classNames: 'col-md-4',\n            requiredDependsOn: 'certificateName',\n            onChange: (e) => {\n                if (\n                    !['image/png', 'image/jpeg'].includes(\n                        e.target.files[0].type,\n                    )\n                ) {\n                    return 'Please upload a valid png or jpg file'\n                } else if (e.target.files[0].size > 5000000) {\n                    return 'Please upload a file less than 5MB.'\n                }\n                return null\n            },\n        },\n        {\n            label: 'Interests',\n            type: 'dynamic-dropdown',\n            fieldName: 'interests',\n            canCreate: true,\n            classNames: 'col-md-8',\n            placeholder: 'Select your Interests',\n            multi: true,\n            options: [],\n            maxCharLength: 20,\n            required: true,\n            minOptions: 1,\n            maxOptions: 15,\n            validation: {\n                errorMessage: 'Please enter between 1 to 15 interests',\n            },\n        },\n        {\n            type: 'color-selection',\n            classNames: 'col-md-12',\n        },\n        {\n            label: 'Tagline',\n            type: 'text',\n            fieldName: 'tagline',\n            placeholder: 'Select your tagline (Max 20 characters)',\n            classNames: 'col-md-12',\n            inputClassNames: 'white-border',\n            labelClass: 'experience',\n            validation: {\n                maxLength: 20,\n                errorMessage: 'Maximum characters allowed is 20',\n            },\n            maxLength: 20,\n        },\n        // {\n        //     label: 'Description',\n        //     type: 'textarea',\n        //     fieldName: 'description',\n        //     placeholder:\n        //         'Write about yourself, your journey into fitness and anything which will make people intrested in training with you',\n        //     classNames: 'col-md-12',\n        //     inputClassNames: 'white-border',\n        //     labelClass: 'description',\n        //     validation: {\n        //         minLength: 50,\n        //         errorMessage:\n        //             'Please enter description of atleast 50 characters',\n        //     },\n        //     maxLength: 999999,\n        // },\n        // {\n        //     type: 'transformations',\n        // },\n    ]\n    const convertToLabelName = (options) => {\n        return options?.map((option) => {\n            return {\n                value: option,\n                label: option,\n            }\n        })\n    }\n\n    const fetchOptions = async () => {\n        setIsLoading(true)\n        try {\n            // const expertiseResponse = await axios.get(\n            //     'workout/admin/trainer-expertise/all',\n            // )\n            // const certificateResponse = await axios.get(\n            //     'workout/admin/certificate-name/all',\n            // )\n            const formOptionsResponse = await axios.get(\n                'admin/formOptions/trainerOnboarding',\n            )\n            const formOptions = formOptionsResponse?.data\n            const formCopy = [...trainerOnboardingForm]\n            formCopy[5] = {\n                ...formCopy[5],\n                options: convertToLabelName(formOptions?.expertiseOptions),\n            }\n            formCopy[7] = {\n                ...formCopy[7],\n                options: convertToLabelName(formOptions?.certificationOptions),\n            }\n            formCopy[9] = {\n                ...formCopy[9],\n                options: convertToLabelName(formOptions?.interestOptions),\n            }\n            setForm(formCopy)\n        } catch (error) {\n            setIsError(true)\n        }\n        setIsLoading(false)\n    }\n\n    const submitData = async (data) => {\n        if (data) {\n            setIsLoading(true)\n            const response = await axios.post(`trainers/add`)\n            userContext.setProfileRef(response?.data?.profileRef)\n            setIsLoading(false)\n            history.push('/')\n        }\n    }\n\n    const modifier = (data) => {\n        transformations?.forEach((tu, idx) => {\n            let file = new File(\n                [tu.imgUrl],\n                `Transformation_${idx + 1}_${tu.name.replace(/\\s+/g, '')}`,\n                {\n                    type: tu?.imgUrl?.type,\n                },\n            )\n            console.log(URL.createObjectURL(file))\n            transformations[idx].imgUrl = file\n        })\n        data['transformations'] = transformations\n        const aadhar = new File(data['proofFile'], `AadharCard`, {\n            type: data['proofFile'][0]?.type,\n        })\n        const certificate = new File(\n            data['certificateFile'],\n            `Certificate_${data.certificateName}`,\n            {\n                type: data['certificateFile'][0]?.type,\n            },\n        )\n\n        if (data['displayPicture'].length) {\n            const display = new File(data['displayPicture'], `displayPicture`, {\n                type: data['displayPicture'][0].type,\n            })\n            data['displayPicture'] = display\n        }\n        data['proofFile'] = aadhar\n        data['certificateFile'] = certificate\n        return data\n    }\n\n    const submitHandler = async (data) => {\n        const formData = new FormData()\n        Object.keys(data).forEach((key) => {\n            if (key === 'proofFile') {\n                if (data[key].length != 0) {\n                    formData.append(key, Array.from(data?.proofFile)[0])\n                }\n            } else if (key === 'certificateFile') {\n                if (data[key].length != 0) {\n                    formData.append(key, Array.from(data?.certificateFile)[0])\n                }\n            } else if (key === 'displayPicture') {\n                if (data[key].length != 0) {\n                    formData.append(key, Array.from(data?.displayPicture)[0])\n                }\n            } else {\n                formData.append(key, data[key])\n            }\n        })\n        return formData\n    }\n\n    useEffect(() => {\n        // if (!isProfileComplete) {\n        //     fetchOptions()\n        // } else if (!verified) {\n        //     setIsLoading(false)\n        // }\n        fetchOptions()\n    }, [])\n\n    const profileForm = (\n        <>\n            <Form\n                classNames=\"container\"\n                formDetails={form}\n                formName={'Trainer Onboarding'}\n                requestType=\"post\"\n                showTitle={false}\n                postUrl={'trainers/profile/add'}\n                resetFormOnSubmit={true}\n                callback={(data) => submitData(data)}\n                previewCard={true}\n                transformations={transformations}\n                setTransformations={setTransformations}\n                modifier={(data) => submitHandler(data)}\n            />\n            <small className=\"text-danger\">{error}</small>\n        </>\n    )\n\n    const verifiedPage = (\n        <h2 className=\"text-center mt-5\">Verification Under Progress</h2>\n    )\n\n    return isLoading ? <Loader /> : isError ? <ErrorPage /> : profileForm\n}\n\nOnboarding.propTypes = {\n    callback: PropTypes.func,\n    update: PropTypes.bool,\n    defaultValues: PropTypes.object,\n}\n\nexport default Onboarding\n","import React from 'react'\nimport Onboarding from './TrainerOnboardingForm'\nimport AccountHeader from '../../Profile/Components/AccountHeader'\nimport './index.scss'\n\nconst TrainerOnboarding = () => {\n    return (\n        <div className=\"trainer-onboarding-container container\">\n            <AccountHeader />\n            <Onboarding />\n        </div>\n    )\n}\n\nexport default TrainerOnboarding\n"],"names":["InternalServerErrorPage","_jsx","ErrorPage","errorType","_ref","darkTheme","register","control","helper","fieldKey","subFields","placeholder","size","indexes","setIndexes","useState","counter","setCounter","useEffect","indexList","count","index","push","_jsxs","_Fragment","children","className","map","k","fieldName","concat","name","value","idx","type","DynamicDropdown","defaultOptions","options","multi","canCreate","InputBox","label","refValue","required","validation","id","readOnly","disabled","labelClass","inputLabel","divClassNames","inputClassNames","onClick","addRow","prevIndexes","prevCounter","clearRows","props","setValue","TemplateCard","imgUrl","peopleTrained","tagline","colorIndex","PreviewCard","color","formDetails","postUrl","formName","formIcon","showTitle","defaultValues","requestType","saveButtonText","classNames","saveForLater","previewCard","transformations","setTransformations","callback","modifier","data","isLoading","setIsLoading","isError","setIsError","error","setError","submittedData","setSubmittedData","getDefaultForm","defaultKeyValues","Object","values","forEach","keyName","idFieldName","v","length","textColour","handleSubmit","errors","reset","getValues","watch","formState","isSubmitSuccessful","useForm","allFields","console","log","_allFields$phoneNumbe","_allFields$experience","_allFields$tagline","_allFields$peopleTrai","_allFields$phoneNumbe2","_allFields$experience2","_allFields$tagline2","_allFields$peopleTrai2","phoneNumber","slice","experience","onSubmit","async","saveData","dataM","response","axios","post","headers","put","err","_err$response","_err$response$data","message","displayData","getFormDetails","formInputs","ref","hidden","ListOfValues","_value$validation","_value$validation2","_value$validation3","_value$validation4","errorClassName","maxOptions","maxCharLength","minOptions","errorMessage","_getValues","isRequired","requiredDependsOn","UploadFileButton","acceptableFileExtensions","buttonText","onChange","GenderSelection","ColorSelector","DatePickerComponent","Transformations","TextArea","rows","cols","StarRating","edit","reverse","isHalf","star","showNumber","maxLength","PreviewCardContainer","Button","text","icon","Loader","rating","previewCardColorPalette","dark","style","backgroundColor","themeColor","src","alt","align","currentUser","auth","userContext","useContext","AppContext","profilePicture","displayName","email","Onboarding","form","setForm","history","useHistory","trainerOnboardingForm","minLength","e","target","files","includes","convertToLabelName","option","formOptionsResponse","get","formOptions","formCopy","expertiseOptions","certificationOptions","interestOptions","fetchOptions","profileForm","Form","resetFormOnSubmit","_response$data","setProfileRef","profileRef","submitData","formData","FormData","keys","key","append","Array","from","proofFile","certificateFile","displayPicture","submitHandler","TrainerOnboarding","AccountHeader"],"sourceRoot":""}