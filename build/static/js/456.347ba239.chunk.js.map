{"version":3,"file":"static/js/456.347ba239.chunk.js","mappings":"iTAqBA,MAAMA,EAAe,CACjBC,QAAUC,IAAQ,IACXA,EACHC,MAAO,QACPC,WAAY,cACZC,YAAa,QACbC,aAAc,IAElBC,YAAcL,IAAQ,IACfA,EACHC,MAAO,UAEXK,UAAYN,IAAQ,IACbA,EACHC,MAAO,QACPC,WAAY,gBAEhBK,IAAMP,IAAQ,IACPA,EACHC,MAAO,QACPC,WAAY,iBAyepB,EAteoBM,IAMb,IANc,QACjBC,EAAO,SACPC,EAAWA,SAAQ,YACnBC,EAAW,eACXC,EAAc,IACdC,GACHL,EACG,MAAOM,EAAiBC,IAAsBC,EAAAA,EAAAA,UAASP,EAAQQ,eACxDC,EAAOC,IAAYH,EAAAA,EAAAA,UAASP,EAAQQ,eACpCG,EAASC,IAAcL,EAAAA,EAAAA,WAAS,IAChCM,EAAOC,IAAaP,EAAAA,EAAAA,WAAS,IAC7BQ,EAAcC,IAAmBT,EAAAA,EAAAA,UAAS,KAC1CU,EAAUC,IAAeX,EAAAA,EAAAA,WAAS,IAClCY,EAAMC,IAAWb,EAAAA,EAAAA,UAASP,EAAQQ,eAClCa,EAAWC,IAAgBf,EAAAA,EAAAA,WAAS,IAC3CgB,EAAAA,EAAAA,YAAU,KACoB,kBAAtBvB,EAAQwB,WACRrB,EAAe,IACRD,EACHuB,cAAehB,IAGG,YAAtBT,EAAQwB,WACRrB,EAAe,IACRD,EACHwB,QAASjB,IAGS,eAAtBT,EAAQwB,WACRrB,EAAe,IACRD,EACHyB,IAAKlB,GAEb,GACD,CAACA,IACJ,MAAMmB,EAAkBC,UACpB,IAAIC,GAAY,EAehB,GAdAR,GAAa,GACY,mBAArBtB,EAAQwB,YACO,OAAfnB,QAAe,IAAfA,GAAAA,EAAiB0B,SAASC,IACtB,GAAIA,EAAIC,UAOJ,OANAjB,EACI,iDAEJF,GAAU,GACVgB,GAAY,OACZR,GAAa,EAEjB,KAGJQ,EAAW,CAEX,GADAhB,GAAU,GACNG,EAAU,CAEV,GACIjB,EAAQQ,eAAiBC,GACH,gBAAtBT,EAAQwB,WACRxB,EAAQQ,aAAaC,OAASU,EAAKV,MAKnC,OAHAO,EAAgB,sBAChBF,GAAU,QACVQ,GAAa,GAGjB,GACItB,EAAQQ,eAAiBC,GACH,oBAAtBT,EAAQwB,UAERZ,GAAW,OACR,CACH,MAAMsB,EAAWlC,EAAQmC,eACrBnC,EAAQwB,UACRf,GAEJ,GAAY,OAARyB,QAAQ,IAARA,GAAAA,EAAUE,QAIV,OAHApB,EAAwB,OAARkB,QAAQ,IAARA,OAAQ,EAARA,EAAUG,SAC1BvB,GAAU,QACVQ,GAAa,GAGbN,EAAgB,IAChBF,GAAU,GAEd,IAAIwB,EAAO,CAAC,EACZA,EAAY,MAAItC,EAAQwB,UAEE,cAAtBxB,EAAQwB,WACc,cAAtBxB,EAAQwB,UAERc,EAAY,MAAI7B,EAAM8B,KAAKC,GAASA,EAAK/B,QAEzC6B,EAAY,MAAI7B,EAEpB,IACI,IAAIgC,EACJ,GAA0B,oBAAtBzC,EAAQwB,UAAiC,CACzC,MAAMkB,EAAW,IAAIC,SACrBtC,EAAgBkC,KAAI,CAACC,EAAMI,KACvB,MAAMC,EAAqBL,EAEC,iBAAjBA,EAAKM,UACZJ,EAASK,OACL,kBACAP,EAAKM,SAAS,GAADE,OACVJ,EAAC,KAAAI,OAAIR,EAAKM,SAASG,KACjBC,MAAM,KACNC,eAUNN,EAAmBC,gBACnBD,EAAmBZ,UAC1BS,EAASK,OACLH,EAAEQ,WACFC,KAAKC,UAAUT,GAClB,IAELJ,QAAYc,EAAAA,EAAMC,MACd,mCACAd,EACA,CACIe,QAAS,CACL,eAAgB,yBAI5B,IAAIC,EACAjB,EAAIH,KAAKjC,gBACbqD,EAAuBnB,KAAKC,IACxBA,EAAgB,WAAI,CAAK,IAE7BlC,EAAmBoD,EAEvB,MAAO,GACc,kBAAVjD,GACe,cAAtBT,EAAQwB,WACc,cAAtBxB,EAAQwB,WACc,QAAtBxB,EAAQwB,UACV,CACE,MAAMkB,EAAW,IAAIC,SACrBD,EAASK,OAAO,eAAgBtC,GACN,gBAAtBT,EAAQwB,WACRkB,EAASK,OAAO,WAAY5B,EAAKV,OAErCiC,EAASK,OAAO,QAAS/C,EAAQwB,WACjCiB,QAAYc,EAAAA,EAAMC,MACd,wBACAd,EACA,CACIe,QAAS,CACL,eAAgB,wBAIhC,MACIhB,QAAYc,EAAAA,EAAMC,MACX,OAAHpD,QAAG,IAAHA,EAAAA,EAAO,2BACPkC,GAGW,MAAfG,EAAIkB,QACJ/C,GAAW,GACXE,GAAU,KAGVA,GAAU,GACVE,EAAgByB,EAAIH,KAAKD,UAEH,aAAtBrC,EAAQwB,WACRoC,MACI,gDAGZ,CAAE,MAAOC,GACL/C,GAAU,GACVF,GAAW,EACf,CACJ,CACJ,CACAU,GAAa,GACbJ,GAAaD,EACjB,GAqMJ,OACI6C,EAAAA,EAAAA,MAAA,OAAKC,UAAS,qBAAuBC,SAAA,EACjCF,EAAAA,EAAAA,MAAA,OAAKC,UAAS,sBAAAf,OAAwBhD,EAAQiE,YAAaD,SAAA,CApM1C,qBAAjBhE,EAAQkE,MAEJC,EAAAA,EAAAA,KAAA,OAAKJ,UAAS,GAAAf,OAAKhD,EAAQoE,eAAgBJ,UACvCG,EAAAA,EAAAA,KAACE,EAAAA,EAAe,CACZC,UAAWrD,EACXT,aAAcR,EAAQQ,aACtBE,SAAUA,MAIE,gBAAjBV,EAAQkE,MAEXC,EAAAA,EAAAA,KAACI,EAAAA,EAAmB,CAChB/D,aAAcC,EACdC,SAAUA,EACV8D,MAAOxE,EAAQwE,MACfP,WAAYjE,EAAQyE,gBACpBH,UAAWrD,IAGK,qBAAjBjB,EAAQkE,MAEXJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EAClCG,EAAAA,EAAAA,KAAA,QAAMO,MAAO,CAAEC,MAAO,eAAiBZ,UAAU,QAAOC,SACnDhE,EAAQwE,SAEbL,EAAAA,EAAAA,KAACS,EAAAA,EAAS,CACNC,QAAS7E,EAAQ6E,QACjBC,aAAc9E,EAAQQ,aACtBuD,UAAU,eACVgB,OAAQ1F,EACR2F,YAAahF,EAAQgF,YACrBC,QAASjF,EAAQkF,MACjBC,SAAWC,IACP1E,EAAS0E,EAAO,EAEpBC,YAAapE,EACbqE,aAAW,EACXC,iBAAkBA,CAAC9E,EAAO2E,IAElB3E,EAAM+E,OAAS,GACf/E,EAAM+E,OAASxF,EAAQyF,eACvBL,EAAOI,OAASxF,EAAQ0F,gBAMpB,aAAjB1F,EAAQkE,MAEXC,EAAAA,EAAAA,KAACwB,EAAAA,EAAQ,CACLvB,cAAepE,EAAQoE,cACvBwB,WAAY5F,EAAQ4F,WACpBpB,MAAOxE,EAAQwE,MACfvB,KAAMjD,EAAQwB,UACdqE,KAAK,IACLC,KAAK,KACLd,YAAahF,EAAQgF,YACrBP,gBAAiBzE,EAAQyE,gBACzBH,UAAWrD,EACXT,aAAcR,EAAQQ,aACtB2E,SAAWY,IACPrF,EAASqF,EAAEC,OAAOvF,MAAM,IAIZ,iBAAjBT,EAAQkE,MAEXC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAa,CACVC,SAAWvE,IACPjB,EAASiB,EAAI,EAEjB2C,UAAWrD,EACXT,aAAcR,EAAQQ,eAGN,oBAAjBR,EAAQkE,MAEXC,EAAAA,EAAAA,KAAAgC,EAAAA,SAAA,CAAAnC,UACIG,EAAAA,EAAAA,KAACiC,EAAAA,EAAe,CACZ/F,gBAAiBA,EACjBC,mBAAoBA,EACpB+F,YAAa,CAAC,KAAM,MACpB/B,UAAWrD,EACXuD,OAAO,EACP8B,aAAc,sCAIF,gBAAjBtG,EAAQkE,MAEXC,EAAAA,EAAAA,KAACoC,EAAAA,EAAgB,CACbjC,UAAWrD,EACXgC,KAAMjD,EAAQwB,UACdgF,GAAIxG,EAAQwB,UACZiF,WAAmB,OAAPzG,QAAO,IAAPA,OAAO,EAAPA,EAASyG,WACrBtB,SAAWY,IACPrF,EAASqF,EAAEC,OAAOU,MAAM,GAAG,IAIf,gBAAjB1G,EAAQkE,MAEXJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,6CAA4CC,SAAA,EACvDG,EAAAA,EAAAA,KAAA,QACIO,MAAO,CAAEC,MAAO,eAChBZ,UAAU,QAAOC,SAEhBhE,EAAQwE,SAEbL,EAAAA,EAAAA,KAACS,EAAAA,EAAS,CACNC,QAAS7E,EAAQ6E,QACjBC,aAAc9E,EAAQQ,aACtBuD,UAAU,eACVgB,OAAQ1F,EACR2F,YAAahF,EAAQgF,YACrBC,SAAS,EACTE,SAAWC,IACPhE,EAAQgE,EAAO,EAEnBC,YAAapE,EACbqE,aAAW,EACXC,iBAAkBA,CAAC9E,EAAO2E,IAElB3E,EAAM+E,OAAS,GACf/E,EAAM+E,OAASxF,EAAQyF,eACvBL,EAAOI,OAASxF,EAAQ0F,iBAKxCvB,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,wBAAuBC,SACjC/C,GACGkD,EAAAA,EAAAA,KAACoC,EAAAA,EAAgB,CACbjC,UAAWrD,EACXgC,KAAMjD,EAAQwB,UACdgF,GAAIxG,EAAQwB,UACZiF,WAAmB,OAAPzG,QAAO,IAAPA,OAAO,EAAPA,EAASyG,WACrBtB,SAAWY,IACPrF,EAASqF,EAAEC,OAAOU,MAAM,GAAG,KAInCvC,EAAAA,EAAAA,KAACwC,EAAAA,GAAI,CACDC,GAAI,CACAC,SAAU7G,EAAQ8G,gBAEtBd,OAAO,SAAQhC,UAEfG,EAAAA,EAAAA,KAAC4C,EAAAA,EAAM,CACHrC,MAAO,CACHsC,gBACI,4BAERC,KAAM,4BAON,gBAAjBjH,EAAQkE,MAEXJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACjCG,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,aAAYC,SAAC,eAC5BG,EAAAA,EAAAA,KAAC+C,EAAAA,EAAW,CACRvF,IAAKzB,EAAYyB,IACjBlB,MAAOP,EACPoE,UAAWrD,EACXkE,SAAWY,IACPrF,EAASqF,EAAEC,OAAOU,MAAM,GAAG,QAOvCvC,EAAAA,EAAAA,KAACgD,EAAAA,EAAQ,CACLX,GAAIxG,EAAQgF,YACZd,KAAMlE,EAAQkE,KACdc,YAAahF,EAAQgF,YACrBvE,MAAOA,EACP+D,MAAOxE,EAAQwE,MACfF,UAAWrD,EACXwD,gBAAgB,eAChBU,SAAWiC,GAAQ1G,EAAS0G,EAAIpB,OAAOvF,OACvC2D,cAAe,YACfwB,WAAY,QACZyB,UAAWrH,EAAQqH,YASL,oBAAjBrH,EAAQkE,MACLJ,EAAAA,EAAAA,MAAA,OACIY,MAAO,CACH4C,QAAS,OACTC,eAAgB,gBAChBC,WAAY,UACdxD,SAAA,CAEDhE,EAAQyH,gBACTtD,EAAAA,EAAAA,KAAA,QACIJ,UAAU,wBACV2D,QAAS9F,EAAgBoC,SAExB/C,GACGkD,EAAAA,EAAAA,KAAAgC,EAAAA,SAAA,CAAAnC,UACIG,EAAAA,EAAAA,KAACwD,EAAAA,GAAI,CACD5D,UAAU,YACV6D,KAAM,UACNpI,MAAM,QACNqI,OAAQ,QAShB1D,EAAAA,EAAAA,KAAAgC,EAAAA,SAAA,CAAAnC,UACIG,EAAAA,EAAAA,KAACwD,EAAAA,GAAI,CACD5D,UAAU,YACV6D,KAAM,UACNpI,MAAM,QACNqI,OAAQ,aAY5B1D,EAAAA,EAAAA,KAAA,QACIJ,UAAU,wBACV2D,QAAS9F,EAAgBoC,SAExB3C,GACG8C,EAAAA,EAAAA,KAAAgC,EAAAA,SAAA,CAAAnC,UACIG,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,MAEX7G,GACAkD,EAAAA,EAAAA,KAAAgC,EAAAA,SAAA,CAAAnC,UACIG,EAAAA,EAAAA,KAACwD,EAAAA,GAAI,CACDC,KAAK,UACLC,OAAQ,GACRrI,MAAM,aAId2E,EAAAA,EAAAA,KAAAgC,EAAAA,SAAA,CAAAnC,UACIG,EAAAA,EAAAA,KAACwD,EAAAA,GAAI,CACDC,KAAK,UACLC,OAAQ,GACRrI,MAAM,iBAQ7BqB,GACGsD,EAAAA,EAAAA,KAAA,SAAOJ,UAAU,gBAAeC,SAC3BjD,IAAgB+C,EAAAA,EAAAA,MAAAqC,EAAAA,SAAA,CAAAnC,SAAA,CAAGhE,EAAQwE,MAAM,2BAEtC7D,GACAmD,EAAAA,EAAAA,MAAA,SAAOC,UAAU,kBAAiBC,SAAA,CAC7BhE,EAAQwE,MAAM,uBACG,mBAAjBxE,EAAQwE,MACH,sCACA,MAGV,KAEF,C,8GCjgBd,MA6EA,EA7EiBuD,KACb,MAAO/H,EAASgI,IAAczH,EAAAA,EAAAA,UAAS,KAChCc,EAAWC,IAAgBf,EAAAA,EAAAA,WAAS,IACpC6B,EAAS6F,IAAc1H,EAAAA,EAAAA,WAAS,GAsDvC,OArDAgB,EAAAA,EAAAA,YAAUM,UACN,IACIP,GAAa,GACb,MACM4G,SADiB3E,EAAAA,EAAAA,GAAM,8BACAjB,KACvBtC,EAAU,CACZ,CACIwE,MAAO,eACPhD,UAAW,cACXhB,aAAc0H,EAAYC,YAC1BhG,eAAgBA,CAACG,EAAM7B,KACZ,CACH2B,SAAS,IAGjB8B,KAAM,SACND,WAAY,YACZe,YAAa,YACbqC,UAAW,IAEf,CACI7F,UAAW,MACXW,eAAgBA,CAACG,EAAM7B,KACZ,CACH2B,SAAS,IAGjB8B,KAAM,cACND,WAAY,YACZe,YAAa,MACbR,MAAO,MACPhE,aAAc,IAAI4H,KAAKF,EAAYG,MAEvC,CACI7G,UAAW,SACXhB,aAAc0H,EAAYI,OAC1BnG,eAAgBA,CAACG,EAAM7B,KACZ,CACH2B,SAAS,IAGjB8B,KAAM,mBACND,WAAY,YACZe,YAAa,qBAGrBgD,EAAWhI,GACXuI,QAAQC,IAAIN,GACZ5G,GAAa,EACjB,CAAE,MAAOT,GACLoH,GAAW,EACf,IACD,IACI5G,GACH8C,EAAAA,EAAAA,KAAC2D,EAAAA,EAAM,CAACW,YAAU,IAClBrG,GACA+B,EAAAA,EAAAA,KAACuE,EAAAA,EAAS,KAEV5E,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EAC/BG,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,UAASC,SAAC,aACtBhE,EAAQuC,KAAI,CAACoG,EAAQhH,KAEdwC,EAAAA,EAAAA,KAACyE,EAAAA,EAAW,CAER5I,QAAS2I,EACTvI,IAAI,6BAFCuB,OAOxB,C","sources":["components/Profile/Components/EditableRow/index.jsx","components/Profile/Components/Personal/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport axios from '../../../../store/axios-secure'\nimport InputBox from '../../../Common/Form/InputBox'\nimport './index.scss'\nimport GenderSelection from '../../../Common/Form/GenderSelection'\nimport DatePickerComponent from '../../../Common/Form/DatePicker'\nimport DynamicDropdown from '../../../Common/Form/DynamicDropdown'\nimport ColorSelector from '../../../Common/Form/ColorSelector'\nimport UploadFileButton from '../../../Common/Form/UploadFileButton'\nimport Creatable from 'react-select/creatable'\nimport TextArea from '../../../Common/Form/TextArea'\nimport { Transformations } from '../../../Common/Form/Transformations'\nimport PreviewCard from '../../../Common/Form/PreviewCardContainer/PreviewCard'\n\nimport { Icon } from '@iconify/react'\nimport Button from '../../../Common/Button'\nimport { Link } from 'react-router-dom'\nimport Loader from '../../../Common/Loader'\n\nconst customStyles = {\n    control: (provided) => ({\n        ...provided,\n        color: 'white',\n        background: 'transparent',\n        borderColor: 'white',\n        borderRadius: 8,\n    }),\n    singleValue: (provided) => ({\n        ...provided,\n        color: 'white',\n    }),\n    container: (provided) => ({\n        ...provided,\n        color: 'black',\n        background: 'transparent',\n    }),\n    svg: (provided) => ({\n        ...provided,\n        color: 'black',\n        background: 'transparent',\n    }),\n}\nconst EditableRow = ({\n    details,\n    saveData = () => {},\n    previewCard,\n    setPreviewCard,\n    url,\n}) => {\n    const [transformations, setTransformations] = useState(details.initialValue)\n    const [value, setValue] = useState(details.initialValue)\n    const [success, setSuccess] = useState(false)\n    const [error, setErrors] = useState(false)\n    const [errorMessage, setErrorMessage] = useState('')\n    const [editable, setEditable] = useState(false)\n    const [cert, setCert] = useState(details.initialValue)\n    const [isLoading, setIsLoading] = useState(false)\n    useEffect(() => {\n        if (details.fieldName === 'peopleTrained') {\n            setPreviewCard({\n                ...previewCard,\n                peopleTrained: value,\n            })\n        }\n        if (details.fieldName === 'tagline') {\n            setPreviewCard({\n                ...previewCard,\n                tagline: value,\n            })\n        }\n        if (details.fieldName === 'themeColor') {\n            setPreviewCard({\n                ...previewCard,\n                idx: value,\n            })\n        }\n    }, [value])\n    const onSubmitHandler = async () => {\n        let validated = true\n        setIsLoading(true)\n        if (details.fieldName == 'transformations') {\n            transformations?.forEach((val) => {\n                if (val.isEditing) {\n                    setErrorMessage(\n                        'Please save transformations before proceeding',\n                    )\n                    setErrors(true)\n                    validated = false\n                    setIsLoading(false)\n                    return\n                }\n            })\n        }\n        if (validated) {\n            setErrors(false)\n            if (editable) {\n                // If value not changed, just save\n                if (\n                    details.initialValue === value &&\n                    details.fieldName === 'certificate' &&\n                    details.initialValue.value != cert.value\n                ) {\n                    setErrorMessage('Please Upload file')\n                    setErrors(true)\n                    setIsLoading(false)\n                    return\n                }\n                if (\n                    details.initialValue === value &&\n                    details.fieldName !== 'transformations'\n                ) {\n                    setSuccess(true)\n                } else {\n                    const response = details.validateSubmit(\n                        details.fieldName,\n                        value,\n                    )\n                    if (response?.isError) {\n                        setErrorMessage(response?.message)\n                        setErrors(true)\n                        setIsLoading(false)\n                        return\n                    } else {\n                        setErrorMessage('')\n                        setErrors(false)\n                    }\n                    var data = {}\n                    data['field'] = details.fieldName\n                    if (\n                        details.fieldName === 'interests' ||\n                        details.fieldName === 'expertise'\n                    ) {\n                        data['value'] = value.map((item) => item.value)\n                    } else {\n                        data['value'] = value\n                    }\n                    try {\n                        let res\n                        if (details.fieldName === 'transformations') {\n                            const formData = new FormData()\n                            transformations.map((item, i) => {\n                                const transformationJson = item\n                                //if img url is gcpurl then don't append\n                                if (typeof item.imageUrl != 'string') {\n                                    formData.append(\n                                        'transformations',\n                                        item.imageUrl,\n                                        `${i}.${item.imageUrl.name\n                                            .split('.')\n                                            .pop()}`,\n                                    )\n                                }\n                                // formData.append(\n                                //     'transformations',\n                                //     item.imageUrl,\n                                //     `${i}.${item.imageUrl.name\n                                //         .split('.')\n                                //         .pop()}`,\n                                // )\n                                delete transformationJson.imageUrl\n                                delete transformationJson.isEditing\n                                formData.append(\n                                    i.toString(),\n                                    JSON.stringify(transformationJson),\n                                )\n                            })\n                            res = await axios.patch(\n                                'trainers/profile/transformations',\n                                formData,\n                                {\n                                    headers: {\n                                        'Content-Type': 'multipart/form-data',\n                                    },\n                                },\n                            )\n                            let updatedTransformations =\n                                res.data.transformations\n                            updatedTransformations.map((item) => {\n                                item['isEditing'] = false\n                            })\n                            setTransformations(updatedTransformations)\n                            // console.log(updatedTransformations)\n                        } else if (\n                            typeof value === 'object' &&\n                            details.fieldName !== 'interests' &&\n                            details.fieldName !== 'expertise' &&\n                            details.fieldName !== 'DOB'\n                        ) {\n                            const formData = new FormData()\n                            formData.append('uploadedFile', value)\n                            if (details.fieldName === 'certificate') {\n                                formData.append('certName', cert.value)\n                            }\n                            formData.append('field', details.fieldName)\n                            res = await axios.patch(\n                                'trainers/profile/file',\n                                formData,\n                                {\n                                    headers: {\n                                        'Content-Type': 'multipart/form-data',\n                                    },\n                                },\n                            )\n                        } else {\n                            res = await axios.patch(\n                                url ?? 'trainers/profile/profile',\n                                data,\n                            )\n                        }\n                        if (res.status === 200) {\n                            setSuccess(true)\n                            setErrors(false)\n                            // saveData(data)\n                        } else {\n                            setErrors(true)\n                            setErrorMessage(res.data.message)\n                        }\n                        if (details.fieldName === 'username') {\n                            alert(\n                                'Username has been changed. Please login again',\n                            )\n                        }\n                    } catch (err) {\n                        setErrors(true)\n                        setSuccess(false)\n                    }\n                }\n            }\n            setIsLoading(false)\n            setEditable(!editable) /* 1 */\n        }\n    }\n    const input = () => {\n        if (details.type === 'gender-selection') {\n            return (\n                <div className={`${details.divClassNames}`}>\n                    <GenderSelection\n                        disabled={!editable}\n                        initialValue={details.initialValue}\n                        setValue={setValue}\n                    />\n                </div>\n            )\n        } else if (details.type === 'date-picker') {\n            return (\n                <DatePickerComponent\n                    initialValue={value}\n                    setValue={setValue}\n                    label={details.label}\n                    classNames={details.inputClassNames}\n                    disabled={!editable}\n                />\n            )\n        } else if (details.type === 'dynamic-dropdown') {\n            return (\n                <div className=\"label-input-container\">\n                    <span style={{ width: 'fit-content' }} className=\"label\">\n                        {details.label}\n                    </span>\n                    <Creatable\n                        options={details.options}\n                        defaultValue={details.initialValue}\n                        className=\"white-border\"\n                        styles={customStyles}\n                        placeholder={details.placeholder}\n                        isMulti={details.multi}\n                        onChange={(values) => {\n                            setValue(values)\n                        }}\n                        isDisabled={!editable}\n                        isClearable\n                        isValidNewOption={(value, values) => {\n                            return (\n                                value.length > 0 &&\n                                value.length < details.maxCharLength &&\n                                values.length < details.maxOptions\n                            )\n                        }}\n                    />\n                </div>\n            )\n        } else if (details.type === 'textarea') {\n            return (\n                <TextArea\n                    divClassNames={details.divClassNames}\n                    labelClass={details.labelClass}\n                    label={details.label}\n                    name={details.fieldName}\n                    rows=\"4\"\n                    cols=\"50\"\n                    placeholder={details.placeholder}\n                    inputClassNames={details.inputClassNames}\n                    disabled={!editable}\n                    initialValue={details.initialValue}\n                    onChange={(e) => {\n                        setValue(e.target.value)\n                    }}\n                />\n            )\n        } else if (details.type === 'color-picker') {\n            return (\n                <ColorSelector\n                    getValue={(idx) => {\n                        setValue(idx)\n                    }}\n                    disabled={!editable}\n                    initialValue={details.initialValue}\n                />\n            )\n        } else if (details.type === 'transformations') {\n            return (\n                <>\n                    <Transformations\n                        transformations={transformations}\n                        setTransformations={setTransformations}\n                        breakpoints={[2500, 1200]}\n                        disabled={!editable}\n                        label={false}\n                        divClassName={'profile-transformation-carousel'}\n                    />\n                </>\n            )\n        } else if (details.type === 'upload-file') {\n            return (\n                <UploadFileButton\n                    disabled={!editable}\n                    name={details.fieldName}\n                    id={details.fieldName}\n                    buttonText={details?.buttonText}\n                    onChange={(e) => {\n                        setValue(e.target.files[0])\n                    }}\n                />\n            )\n        } else if (details.type === 'upload-cert') {\n            return (\n                <div className=\"upload-cert-div\">\n                    <div className=\"upload-cert-div-left label-input-container\">\n                        <span\n                            style={{ width: 'fit-content' }}\n                            className=\"label\"\n                        >\n                            {details.label}\n                        </span>\n                        <Creatable\n                            options={details.options}\n                            defaultValue={details.initialValue}\n                            className=\"white-border\"\n                            styles={customStyles}\n                            placeholder={details.placeholder}\n                            isMulti={false}\n                            onChange={(values) => {\n                                setCert(values)\n                            }}\n                            isDisabled={!editable}\n                            isClearable\n                            isValidNewOption={(value, values) => {\n                                return (\n                                    value.length > 0 &&\n                                    value.length < details.maxCharLength &&\n                                    values.length < details.maxOptions\n                                )\n                            }}\n                        />\n                    </div>\n                    <div className=\"upload-cert-div-right\">\n                        {editable ? (\n                            <UploadFileButton\n                                disabled={!editable}\n                                name={details.fieldName}\n                                id={details.fieldName}\n                                buttonText={details?.buttonText}\n                                onChange={(e) => {\n                                    setValue(e.target.files[0])\n                                }}\n                            />\n                        ) : (\n                            <Link\n                                to={{\n                                    pathname: details.certificateUrl,\n                                }}\n                                target=\"_blank\"\n                            >\n                                <Button\n                                    style={{\n                                        backgroundColor:\n                                            'rgba(196, 196, 196, 0.1)',\n                                    }}\n                                    text={'View Certificate'}\n                                />\n                            </Link>\n                        )}\n                    </div>\n                </div>\n            )\n        } else if (details.type === 'previewCard') {\n            return (\n                <div className=\"profile-preview-card\">\n                    <div className=\"card-label\">Your Card</div>\n                    <PreviewCard\n                        idx={previewCard.idx}\n                        value={previewCard}\n                        disabled={!editable}\n                        onChange={(e) => {\n                            setValue(e.target.files[0])\n                        }}\n                    />\n                </div>\n            )\n        } else {\n            return (\n                <InputBox\n                    id={details.placeholder}\n                    type={details.type}\n                    placeholder={details.placeholder}\n                    value={value}\n                    label={details.label}\n                    disabled={!editable}\n                    inputClassNames=\"white-border\"\n                    onChange={(evt) => setValue(evt.target.value)}\n                    divClassNames={'col-md-12'}\n                    labelClass={'label'}\n                    maxLength={details.maxLength}\n                />\n            )\n        }\n    }\n    return (\n        <div className={`edit-row-container`}>\n            <div className={`box-edit-container ${details.classNames}`}>\n                {input()}\n                {details.type === 'transformations' ? (\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                            alignItems: 'center',\n                        }}\n                    >\n                        {details.secondaryLabel}\n                        <span\n                            className=\"edit-button-container\"\n                            onClick={onSubmitHandler}\n                        >\n                            {editable ? (\n                                <>\n                                    <Icon\n                                        className=\"edit-icon\"\n                                        icon={'bx:save'}\n                                        color=\"white\"\n                                        height={23}\n                                    />\n                                    {/* <img\n                                        src={BlackSaveIcon}\n                                        alt=\"\"\n                                        className=\"edit-icon\"\n                                    /> */}\n                                </>\n                            ) : (\n                                <>\n                                    <Icon\n                                        className=\"edit-icon\"\n                                        icon={'ci:edit'}\n                                        color=\"white\"\n                                        height={23}\n                                    />\n                                    {/* <img\n                                        src={EditIcon}\n                                        alt=\"\"\n                                        className=\"edit-icon\"\n                                    /> */}\n                                </>\n                            )}\n                        </span>\n                    </div>\n                ) : (\n                    <span\n                        className=\"edit-button-container\"\n                        onClick={onSubmitHandler}\n                    >\n                        {isLoading ? (\n                            <>\n                                <Loader />\n                            </>\n                        ) : editable ? (\n                            <>\n                                <Icon\n                                    icon=\"bx:save\"\n                                    height={23}\n                                    color=\"white\"\n                                />\n                            </>\n                        ) : (\n                            <>\n                                <Icon\n                                    icon=\"ci:edit\"\n                                    height={23}\n                                    color=\"white\"\n                                />\n                            </>\n                        )}\n                    </span>\n                )}\n            </div>\n\n            {error ? (\n                <small className=\"message error\">\n                    {errorMessage || <>{details.label} could not be saved</>}\n                </small>\n            ) : success ? (\n                <small className=\"message success\">\n                    {details.label} saved successfully.\n                    {details.label == 'Transformations'\n                        ? ' Updation of images might take time'\n                        : ''}\n                </small>\n            ) : (\n                ''\n            )}\n        </div>\n    )\n}\n\nEditableRow.propTypes = {\n    details: PropTypes.object,\n    saveData: PropTypes.func,\n}\n\nexport default EditableRow\n","import React, { useState, useEffect } from 'react'\nimport EditableRow from '../EditableRow'\nimport axios from '../../../../store/axios-secure'\n\nimport './index.scss'\nimport Loader from '../../../Common/Loader'\nimport ErrorPage from '../../../Common/ErrorPage'\n\nconst Personal = () => {\n    const [details, setDetails] = useState([])\n    const [isLoading, setIsLoading] = useState(false)\n    const [isError, setIsError] = useState(false)\n    useEffect(async () => {\n        try {\n            setIsLoading(true)\n            const personal = await axios('trainers/profile/personal')\n            const profileData = personal.data\n            const details = [\n                {\n                    label: 'Phone Number',\n                    fieldName: 'phoneNumber',\n                    initialValue: profileData.phoneNumber,\n                    validateSubmit: (data, value) => {\n                        return {\n                            isError: false,\n                        }\n                    },\n                    type: 'number',\n                    classNames: 'col-md-12',\n                    placeholder: 'Phone no.',\n                    maxLength: 10,\n                },\n                {\n                    fieldName: 'DOB',\n                    validateSubmit: (data, value) => {\n                        return {\n                            isError: false,\n                        }\n                    },\n                    type: 'date-picker',\n                    classNames: 'col-md-12',\n                    placeholder: 'DOB',\n                    label: 'DOB',\n                    initialValue: new Date(profileData.DOB),\n                },\n                {\n                    fieldName: 'gender',\n                    initialValue: profileData.gender,\n                    validateSubmit: (data, value) => {\n                        return {\n                            isError: false,\n                        }\n                    },\n                    type: 'gender-selection',\n                    classNames: 'col-md-12',\n                    placeholder: 'Gender Selection',\n                },\n            ]\n            setDetails(details)\n            console.log(profileData)\n            setIsLoading(false)\n        } catch (error) {\n            setIsError(true)\n        }\n    }, [])\n    return isLoading ? (\n        <Loader fullHeight />\n    ) : isError ? (\n        <ErrorPage />\n    ) : (\n        <div className=\"personal-container\">\n            <p className=\"heading\">Personal</p>\n            {details.map((detail, idx) => {\n                return (\n                    <EditableRow\n                        key={idx}\n                        details={detail}\n                        url=\"trainers/profile/personal\"\n                    />\n                )\n            })}\n        </div>\n    )\n}\n\nexport default Personal\n"],"names":["customStyles","control","provided","color","background","borderColor","borderRadius","singleValue","container","svg","_ref","details","saveData","previewCard","setPreviewCard","url","transformations","setTransformations","useState","initialValue","value","setValue","success","setSuccess","error","setErrors","errorMessage","setErrorMessage","editable","setEditable","cert","setCert","isLoading","setIsLoading","useEffect","fieldName","peopleTrained","tagline","idx","onSubmitHandler","async","validated","forEach","val","isEditing","response","validateSubmit","isError","message","data","map","item","res","formData","FormData","i","transformationJson","imageUrl","append","concat","name","split","pop","toString","JSON","stringify","axios","patch","headers","updatedTransformations","status","alert","err","_jsxs","className","children","classNames","type","_jsx","divClassNames","GenderSelection","disabled","DatePickerComponent","label","inputClassNames","style","width","Creatable","options","defaultValue","styles","placeholder","isMulti","multi","onChange","values","isDisabled","isClearable","isValidNewOption","length","maxCharLength","maxOptions","TextArea","labelClass","rows","cols","e","target","ColorSelector","getValue","_Fragment","Transformations","breakpoints","divClassName","UploadFileButton","id","buttonText","files","Link","to","pathname","certificateUrl","Button","backgroundColor","text","PreviewCard","InputBox","evt","maxLength","display","justifyContent","alignItems","secondaryLabel","onClick","Icon","icon","height","Loader","Personal","setDetails","setIsError","profileData","phoneNumber","Date","DOB","gender","console","log","fullHeight","ErrorPage","detail","EditableRow"],"sourceRoot":""}