{"version":3,"file":"static/js/242.4f101cdb.chunk.js","mappings":"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","sources":["components/Common/AccordionComponent/index.jsx","components/Common/Modal/index.jsx","components/Common/ShadowContainer/index.jsx","components/Profile/Components/Programs/Program/index.jsx","components/Profile/Components/Programs/index.jsx"],"sourcesContent":["import React, { useState } from 'react'\nimport './index.scss'\nimport { Icon } from '@iconify/react'\nimport ShadowContainer from '../ShadowContainer'\n\nconst AccordionComponent = ({\n    data,\n    active = false,\n    headClick = true,\n    disabled = false,\n}) => {\n    const [isActive, setIsActive] = useState(active)\n    return (\n        <div className=\"accordion-container\">\n            <div className=\"accordion\" id=\"accordionExample\">\n                <ShadowContainer classNames=\"card-container\">\n                    <div\n                        className={`accordion-header ${\n                            isActive ? 'toggle' : ''\n                        }`}\n                    >\n                        <p\n                            className=\"accordion-title\"\n                            onClick={() => {\n                                if (headClick) {\n                                    setIsActive(!isActive)\n                                }\n                            }}\n                        >\n                            {data?.parent}\n                        </p>\n                        {!disabled ? (\n                            isActive ? (\n                                <Icon\n                                    icon={'akar-icons:chevron-up'}\n                                    className=\"down-carret\"\n                                    onClick={() => {\n                                        setIsActive(!isActive)\n                                    }}\n                                />\n                            ) : (\n                                <Icon\n                                    icon={'akar-icons:chevron-down'}\n                                    className=\"down-carret\"\n                                    onClick={() => {\n                                        setIsActive(!isActive)\n                                    }}\n                                />\n                            )\n                        ) : null}\n                    </div>\n                    {isActive ? (\n                        <div className={isActive ? '' : 'collapse'}>\n                            <ShadowContainer classNames=\"accordion-body \">\n                                {data?.child}\n                            </ShadowContainer>\n                        </div>\n                    ) : (\n                        <></>\n                    )}\n                </ShadowContainer>\n            </div>\n        </div>\n    )\n}\n\nexport default AccordionComponent\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Modal } from 'react-bootstrap'\nimport ShadowContainer from '../ShadowContainer'\nimport './index.scss'\nimport { Icon } from '@iconify/react'\n\nconst CloseButtonIcon = '/images/closeWhite.svg'\n// const CloseButtonIcon =\n//     'https://storage.googleapis.com/evolv-store/icons/common/close.svg'\n\nconst CustomModal = ({\n    onHide,\n    children,\n    show,\n    title,\n    width = 'large',\n    dark = false,\n    ...props\n}) => {\n    return (\n        <Modal\n            {...props}\n            show={show}\n            size=\"xs\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            dialogClassName={`modal-${width}`}\n            contentClassName=\"no-background\"\n        >\n            <ShadowContainer>\n                <Modal.Body\n                    className={`modal-container modal-container-${width} ${\n                        dark && 'dark'\n                    }`}\n                >\n                    <div className=\"modal-header-container\">\n                        <h4 className=\"modal-title\">{title}</h4>\n                        {/* <img\n                            onClick={onHide}\n                            className=\"close-button-icon\"\n                            src={CloseButtonIcon}\n                            alt=\"close-icon\"\n                        /> */}\n                        <Icon\n                            icon={'ep:close-bold'}\n                            onClick={onHide}\n                            className=\"close-button-icon\"\n                        />\n                    </div>\n                    <div className=\"modal-body-container\">{children}</div>\n                </Modal.Body>\n            </ShadowContainer>\n        </Modal>\n    )\n}\n\nCustomModal.propTypes = {\n    show: PropTypes.bool,\n    width: PropTypes.string,\n    onHide: PropTypes.func,\n    children: PropTypes.element,\n    dark: PropTypes.bool,\n    title: PropTypes.string,\n}\n\nexport default CustomModal\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport './index.scss'\n\nconst ShadowContainer = ({\n    children,\n    classNames = '',\n    border = 'small',\n    square = false,\n    shadowSize = 'normal',\n    cardTitle,\n    cardElementRight,\n    cardTitleClassNames = '',\n    ...props\n}) => {\n    const boxRef = useRef()\n    const [width, setWidth] = useState(0)\n\n    // TODO @rt Find a better method. To Many rerenders\n    const equalHeight = useCallback(() => {\n        const vw = boxRef?.current?.offsetWidth\n        setWidth(vw)\n    }, [])\n\n    useEffect(() => {\n        equalHeight()\n        window.addEventListener('resize', equalHeight)\n        return () => {\n            window.removeEventListener('resize', equalHeight)\n        }\n    }, [])\n\n    return (\n        <>\n            {(cardTitle || cardElementRight) && (\n                <div className=\"d-flex justify-content-between\">\n                    {cardTitle && (\n                        <p\n                            className={`shadow-container-title ${cardTitleClassNames}`}\n                        >\n                            {cardTitle}\n                        </p>\n                    )}\n                    {cardElementRight}\n                </div>\n            )}\n            <div\n                {...props}\n                ref={boxRef}\n                style={\n                    square\n                        ? {\n                              height: width,\n                              background: 'white',\n                          }\n                        : {}\n                }\n                className={`${classNames} shadow-div shadow-div-${shadowSize} border-${border} ${\n                    square ? 'center-fit' : ''\n                }`}\n            >\n                {children}\n            </div>\n        </>\n    )\n}\n\nShadowContainer.propTypes = {\n    children: PropTypes.any,\n    classNames: PropTypes.string,\n    cardTitleClassNames: PropTypes.string,\n    border: PropTypes.string,\n    square: PropTypes.bool,\n    cardTitle: PropTypes.string,\n    shadowSize: PropTypes.string,\n    cardElementRight: PropTypes.element,\n}\n\nexport default ShadowContainer\n","import React, { useEffect, useState } from 'react'\nimport './index.scss'\nimport { MdSave, MdEdit, MdClose } from 'react-icons/md'\nimport Button from '../../../../Common/Button'\nimport Loader from '../../../../Common/Loader'\nimport axios from '../../../../../store/axios-secure'\nimport { Icon } from '@iconify/react'\nimport CustomModal from '../../../../Common/Modal'\nimport ReactTooltip from 'react-tooltip'\nimport { renderToString } from 'react-dom/server'\nconst ProgramsComponent = ({\n    program,\n    programs,\n    idx,\n    deleteProgram,\n    setPrograms,\n    setDisableAddButton,\n    isError,\n    setIsError,\n    setErrorMessage,\n    errorMessage,\n}) => {\n    const [editing, setEditing] = useState(program?.editing)\n    const [formDetails, setFormDetails] = useState(program)\n    const [programTypesArr, setProgramTypesArr] = useState(\n        program?.programTypes,\n    )\n    const [isSuccess, setIsSuccess] = useState(false)\n\n    const [isLoading, setIsLoading] = useState(false)\n    const [showDeleteModal, setShowDeleteModal] = useState(false)\n    useEffect(() => {\n        setDisableAddButton(editing)\n    }, [editing])\n    useEffect(() => {\n        setTimeout(() => {\n            if (isError) {\n                setIsError(false)\n            }\n        }, 5000)\n        setTimeout(() => {\n            if (isSuccess) {\n                setIsSuccess(false)\n            }\n        }, 5000)\n    }, [isError, isSuccess])\n    const getToolTip = ({ name, startDate, endDate }) => {\n        const stringData = renderToString(\n            <div className=\"program-tooltip-div\">\n                <div>{name}</div>\n                <div className=\"date\">Start: {startDate}</div>\n                <div className=\"date\">End: {endDate}</div>\n            </div>,\n        )\n        return stringData\n    }\n    const rand = Math.random()\n    const validate = (program) => {\n        let found = false,\n            newErrorMessage = ''\n        programs?.map((pro) => {\n            if (pro?._id != program?._id && program?.name == pro?.name) {\n                newErrorMessage = 'Program name already exists'\n                found = true\n                return\n            }\n        })\n        if (!found) {\n            if (program.name == '') {\n                newErrorMessage = 'Please enter the program name'\n                found = true\n            } else if (program.programTypes.length == 0) {\n                newErrorMessage = 'Please enter atleast one Program Type'\n                found = true\n            } else {\n                for (let obj of program.programTypes) {\n                    const keys = Object.keys(obj)\n                    for (let key of keys) {\n                        if (obj[key] == '') {\n                            newErrorMessage = `Please enter all the program type ${key}s in proper format`\n                            found = true\n                            break\n                        } else if (\n                            parseInt(obj[key]) == 0 &&\n                            key == 'duration'\n                        ) {\n                            newErrorMessage = `Program type ${key}s cannot be 0`\n                            found = true\n                            break\n                        } else if (\n                            key == 'discount' &&\n                            parseInt(obj[key]) > parseInt(obj['price'])\n                        ) {\n                            newErrorMessage = `Program type discount cannot be greater than the price!`\n                            found = true\n                            break\n                        }\n                    }\n                    if (found == true) break\n                }\n                if (!found) {\n                    if (program.description == '') {\n                        newErrorMessage = 'Please enter the program description'\n                        found = true\n                    } else {\n                        program.highlights.forEach((str) => {\n                            if (str == '') {\n                                newErrorMessage =\n                                    'Please enter all program highlights'\n                                found = true\n                                return\n                            }\n                        })\n                    }\n                }\n            }\n        }\n        if (found == true) {\n            setErrorMessage({ message: newErrorMessage, idx: idx })\n        }\n        return found\n    }\n    const updateProgram = async (program) => {\n        if (validate(program)) {\n            setIsError(true)\n            return\n        }\n        setIsLoading(true)\n        try {\n            if (program?._id == -1) {\n                const response = await axios.post(`trainers/programs/add`, {\n                    ...program,\n                })\n                const newProgram = response?.data\n                newProgram['editing'] = false\n                setIsSuccess(true)\n                setIsError(false)\n                setPrograms(newProgram)\n            } else {\n                const response = await axios.put(\n                    `/trainers/programs/update?programId=${program?._id}`,\n                    {\n                        ...program,\n                    },\n                )\n                const newProgram = response?.data\n                newProgram['editing'] = false\n                setIsSuccess(true)\n                setIsError(false)\n                setPrograms(newProgram)\n            }\n            setEditing(false)\n        } catch (error) {\n            setIsSuccess(false)\n            setErrorMessage({\n                message: 'Something went wrong',\n                idx: idx,\n            })\n            setIsError(true)\n        }\n        setIsLoading(false)\n    }\n\n    const newProgramTypes = () => {\n        let newProgramTypes = {\n            duration: 7,\n            price: 200,\n            discount: 300,\n        }\n        let updatedProgramsArr = [...programTypesArr]\n        updatedProgramsArr.push(newProgramTypes)\n        setProgramTypesArr(updatedProgramsArr)\n    }\n    const deleteProgramType = (idx) => {\n        let updatedProgram = [...programTypesArr]\n        updatedProgram?.splice(idx, 1)\n        setProgramTypesArr(updatedProgram)\n    }\n    useEffect(() => {\n        setFormDetails(program)\n    }, [program])\n    return (\n        <>\n            <div className=\"program-container\">\n                <div className=\"header\">\n                    <div className=\"title\">\n                        {editing ? (\n                            <div className=\"edit-title\">\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Enter name of program\"\n                                    onChange={(e) => {\n                                        setFormDetails({\n                                            ...formDetails,\n                                            name: e.target.value,\n                                        })\n                                    }}\n                                    value={formDetails?.name}\n                                />\n                            </div>\n                        ) : (\n                            <span>{formDetails?.name}</span>\n                        )}\n                    </div>\n                    <div className=\"options\">\n                        <span className=\"edit-button-container\">\n                            {isLoading ? (\n                                <Loader />\n                            ) : editing ? (\n                                <MdSave\n                                    size={20}\n                                    onClick={() => {\n                                        let updatedForm = formDetails\n                                        updatedForm.programTypes =\n                                            programTypesArr\n                                        setFormDetails(updatedForm)\n                                        updateProgram({\n                                            ...formDetails,\n                                            editing: false,\n                                        })\n                                    }}\n                                />\n                            ) : (\n                                <MdEdit\n                                    size={20}\n                                    onClick={() => {\n                                        setEditing(true)\n                                    }}\n                                />\n                            )}\n                        </span>\n                        {isLoading ? (\n                            <></>\n                        ) : (\n                            <span className=\"edit-button-container\">\n                                <MdClose\n                                    size={20}\n                                    onClick={(e) => {\n                                        setEditing(false)\n                                        // deleteProgram(idx)\n                                        setShowDeleteModal(true)\n                                    }}\n                                />\n                            </span>\n                        )}\n                    </div>\n                </div>\n                <div className=\"body\">\n                    {isSuccess ? (\n                        <small className=\"message success\">\n                            Saved succesfully\n                        </small>\n                    ) : (\n                        <></>\n                    )}\n                    {isError && errorMessage.idx == idx ? (\n                        <small className=\"message error\">\n                            {errorMessage.message}\n                        </small>\n                    ) : (\n                        <></>\n                    )}\n                    {editing ? (\n                        <div className=\"details\">\n                            <div className=\"highlights\">\n                                <p>Highlights</p>\n                                {formDetails?.highlights?.map(\n                                    (highlight, idx) => {\n                                        return (\n                                            <div\n                                                key={idx}\n                                                className=\"highlight\"\n                                            >\n                                                <input\n                                                    type=\"text\"\n                                                    className=\"highlight-input\"\n                                                    placeholder={`Key Highlight 1`}\n                                                    value={highlight}\n                                                    onChange={(e) => {\n                                                        let updatedHighlights =\n                                                            formDetails?.highlights\n                                                        updatedHighlights[idx] =\n                                                            e.target.value\n                                                        setFormDetails({\n                                                            ...formDetails,\n                                                            highlights:\n                                                                updatedHighlights,\n                                                        })\n                                                    }}\n                                                />\n                                            </div>\n                                        )\n                                    },\n                                )}\n                            </div>\n                            <div className=\"description\">\n                                <p>Description</p>\n                                <p className=\"text-area\">\n                                    {/* {editing ? ( */}\n                                    <textarea\n                                        disabled={!editing}\n                                        type=\"text\"\n                                        className=\"description-input\"\n                                        placeholder=\"Write about the program and what it has to offer in a description format\"\n                                        value={formDetails?.description}\n                                        onChange={(e) => {\n                                            setFormDetails({\n                                                ...formDetails,\n                                                description: e.target.value,\n                                            })\n                                        }}\n                                    />\n                                </p>\n                            </div>\n                        </div>\n                    ) : null}\n                    <div className=\"program-types\">\n                        <p>Program Types</p>\n                        <div className=\"header\">\n                            <div>Duration</div>\n                            <div>Price</div>\n                            <div>Discount</div>\n                        </div>\n                        {programTypesArr?.map((program, idx) => {\n                            return (\n                                <div className=\"program-details\" key={idx}>\n                                    <div className=\"program-detail\">\n                                        {editing ? (\n                                            <div className=\"edit-details\">\n                                                <input\n                                                    type=\"text\"\n                                                    maxLength={3}\n                                                    placeholder=\"Enter days\"\n                                                    value={program?.duration}\n                                                    onChange={(e) => {\n                                                        let updatedProgramTypes =\n                                                            [...programTypesArr]\n                                                        updatedProgramTypes[\n                                                            idx\n                                                        ].duration =\n                                                            e.target.value\n                                                        setProgramTypesArr(\n                                                            updatedProgramTypes,\n                                                        )\n                                                    }}\n                                                    onKeyPress={(e) => {\n                                                        if (isNaN(e.key)) {\n                                                            e.preventDefault()\n                                                        }\n                                                    }}\n                                                />\n                                            </div>\n                                        ) : (\n                                            <span\n                                                style={{ marginRight: '5px' }}\n                                            >\n                                                {program?.duration}\n                                            </span>\n                                        )}\n                                        <span>days</span>\n                                    </div>\n                                    <div className=\"program-detail\">\n                                        <Icon icon={'bx:rupee'} height={22} />\n                                        {editing ? (\n                                            <div className=\"edit-details\">\n                                                <input\n                                                    type=\"text\"\n                                                    maxLength={5}\n                                                    placeholder=\"Enter price\"\n                                                    value={program?.price}\n                                                    onChange={(e) => {\n                                                        let updatedProgramTypes =\n                                                            [...programTypesArr]\n                                                        updatedProgramTypes[\n                                                            idx\n                                                        ].price = e.target.value\n                                                        setProgramTypesArr(\n                                                            updatedProgramTypes,\n                                                        )\n                                                    }}\n                                                    onKeyPress={(e) => {\n                                                        if (isNaN(e.key)) {\n                                                            e.preventDefault()\n                                                        }\n                                                    }}\n                                                />\n                                            </div>\n                                        ) : (\n                                            <span>{program?.price}</span>\n                                        )}\n                                    </div>\n                                    <div className=\"program-detail\">\n                                        <Icon icon={'bx:rupee'} height={22} />\n                                        {editing ? (\n                                            <div className=\"edit-details\">\n                                                <input\n                                                    type=\"text\"\n                                                    maxLength={4}\n                                                    placeholder=\"Enter discount\"\n                                                    value={program?.discount}\n                                                    onChange={(e) => {\n                                                        let updatedProgramTypes =\n                                                            [...programTypesArr]\n                                                        updatedProgramTypes[\n                                                            idx\n                                                        ].discount =\n                                                            e.target.value\n                                                        setProgramTypesArr(\n                                                            updatedProgramTypes,\n                                                        )\n                                                    }}\n                                                    onKeyPress={(e) => {\n                                                        if (isNaN(e.key)) {\n                                                            e.preventDefault()\n                                                        }\n                                                    }}\n                                                />\n                                            </div>\n                                        ) : (\n                                            <span>{program?.discount}</span>\n                                        )}\n                                    </div>\n                                    {editing ? (\n                                        <MdClose\n                                            className=\"close-icon\"\n                                            onClick={() => {\n                                                deleteProgramType(idx)\n                                            }}\n                                        />\n                                    ) : (\n                                        <></>\n                                    )}\n                                </div>\n                            )\n                        })}\n                        {editing ? (\n                            <Button\n                                text={'+ Add Program Type'}\n                                color={'green'}\n                                classNames=\"add-button\"\n                                onClick={() => {\n                                    newProgramTypes()\n                                }}\n                            />\n                        ) : (\n                            <></>\n                        )}\n                    </div>\n                    <div className=\"users\">\n                        {program?.userRefs?.map((user, idx) => {\n                            return (\n                                <div\n                                    key={idx}\n                                    data-for={`getContent-${rand + idx}`}\n                                    data-tip\n                                >\n                                    <img\n                                        class=\"profile-image\"\n                                        src={user?.photoUrl}\n                                    />\n                                    <ReactTooltip\n                                        className=\"tooltip-container-user\"\n                                        id={`getContent-${rand + idx}`}\n                                        getContent={() =>\n                                            getToolTip({\n                                                name: user?.name,\n                                                startDate: new Date(\n                                                    user?.currentProgramRef?.startDate,\n                                                ).toLocaleDateString(),\n                                                endDate: new Date(\n                                                    user?.currentProgramRef?.endDate,\n                                                ).toLocaleDateString(),\n                                            })\n                                        }\n                                        html={true}\n                                    />\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            </div>\n            <CustomModal\n                title={'Delete Program'}\n                show={showDeleteModal}\n                onHide={() => setShowDeleteModal(false)}\n                width=\"medium\"\n                dark={true}\n            >\n                <div>\n                    <p>Are you sure you want to delete the program?</p>\n                    <div className=\"d-flex\">\n                        <Button\n                            text={'Yes'}\n                            color=\"green\"\n                            size=\"s\"\n                            onClick={() => {\n                                deleteProgram(idx)\n                            }}\n                        />\n                        <Button\n                            text={'No'}\n                            color=\"red\"\n                            size=\"s\"\n                            onClick={() => {\n                                setShowDeleteModal(false)\n                            }}\n                        />\n                    </div>\n                </div>\n            </CustomModal>\n        </>\n    )\n}\n\nexport default ProgramsComponent\n","import React, { useEffect, useState } from 'react'\nimport Button from '../../../Common/Button'\nimport axios from '../../../../store/axios-secure'\nimport './index.scss'\nimport ProgramsComponent from './Program'\nimport Loader from '../../../Common/Loader'\nimport AccordionComponent from '../../../Common/AccordionComponent'\nconst ProgramsPage = () => {\n    const [programs, setPrograms] = useState([])\n    const [loading, setLoading] = useState(false)\n    const [disableAddButton, setDisableAddButton] = useState(false)\n    const [isError, setIsError] = useState(false)\n    const [errorMessage, setErrorMessage] = useState({\n        message: 'Could not be saved',\n        idx: -1,\n    })\n    useEffect(async () => {\n        setLoading(true)\n        try {\n            const response = await axios.get('/trainers/programs/all')\n            const programsOffered =\n                response?.data?.profileRef?.programOfferedRefs\n            programsOffered?.forEach((program) => {\n                program['editing'] = false\n            })\n            setPrograms(programsOffered)\n        } catch (error) {\n            console.log(error)\n        }\n        setLoading(false)\n    }, [])\n    const newProgram = async () => {\n        let newProgram = {\n            _id: -1,\n            name: '',\n            editing: true,\n            highlights: ['', '', '', ''],\n            description: '',\n            programTypes: [\n                {\n                    duration: '',\n                    price: '',\n                    discount: '',\n                },\n            ],\n        }\n        setPrograms([...programs, newProgram])\n    }\n    const deleteProgram = async (idx) => {\n        setLoading(true)\n        let updatedPrograms = [...programs]\n        if (updatedPrograms[idx]?._id != -1) {\n            try {\n                const response = await axios.patch(\n                    `/trainers/programs/patch?programId=${updatedPrograms[idx]?._id}`,\n                )\n            } catch (error) {\n                if (error?.response?.status == 405) {\n                    setErrorMessage({\n                        message:\n                            \"This program is assigned to a user, so it can't be deleted.\",\n                        idx: idx,\n                    })\n                    setIsError(true)\n                    setLoading(false)\n                    return\n                }\n            }\n        }\n        updatedPrograms?.splice(idx, 1)\n        setPrograms(updatedPrograms)\n        setLoading(false)\n    }\n    return (\n        <div className=\"programs-container\">\n            <p className=\"heading\">Programs</p>\n            {loading ? (\n                <Loader />\n            ) : (\n                <>\n                    {programs?.map((program, idx) => {\n                        return (\n                            <ProgramsComponent\n                                programs={programs}\n                                program={program}\n                                deleteProgram={deleteProgram}\n                                key={idx}\n                                idx={idx}\n                                setPrograms={(program) => {\n                                    let updatedPrograms = [...programs]\n                                    updatedPrograms[idx] = {\n                                        ...program,\n                                    }\n                                    setPrograms(updatedPrograms)\n                                }}\n                                setDisableAddButton={setDisableAddButton}\n                                isError={isError}\n                                setIsError={setIsError}\n                                setErrorMessage={setErrorMessage}\n                                errorMessage={errorMessage}\n                            />\n                        )\n                    })}\n\n                    <Button\n                        text={'+ Add Program'}\n                        color={'green'}\n                        disabled={disableAddButton}\n                        classNames=\"add-button\"\n                        onClick={() => {\n                            newProgram()\n                        }}\n                    />\n                </>\n            )}\n        </div>\n    )\n}\n\nexport default ProgramsPage\n"],"names":["_ref","data","active","headClick","disabled","isActive","setIsActive","useState","_jsx","className","children","id","_jsxs","ShadowContainer","classNames","concat","onClick","parent","Icon","icon","child","_Fragment","onHide","show","title","width","dark","props","Modal","size","centered","dialogClassName","contentClassName","Body","border","square","shadowSize","cardTitle","cardElementRight","cardTitleClassNames","boxRef","useRef","setWidth","equalHeight","useCallback","_boxRef$current","vw","current","offsetWidth","useEffect","window","addEventListener","removeEventListener","ref","style","height","background","_formDetails$highligh","_program$userRefs","program","programs","idx","deleteProgram","setPrograms","setDisableAddButton","isError","setIsError","setErrorMessage","errorMessage","editing","setEditing","formDetails","setFormDetails","programTypesArr","setProgramTypesArr","programTypes","isSuccess","setIsSuccess","isLoading","setIsLoading","showDeleteModal","setShowDeleteModal","setTimeout","rand","Math","random","updateProgram","async","found","newErrorMessage","map","pro","_id","name","length","obj","keys","Object","key","parseInt","description","highlights","forEach","str","message","validate","response","axios","post","newProgram","put","error","type","placeholder","onChange","e","target","value","Loader","MdSave","updatedForm","MdEdit","MdClose","highlight","updatedHighlights","maxLength","duration","updatedProgramTypes","onKeyPress","isNaN","preventDefault","marginRight","price","discount","updatedProgram","splice","deleteProgramType","Button","text","color","newProgramTypes","updatedProgramsArr","push","userRefs","user","class","src","photoUrl","ReactTooltip","getContent","_user$currentProgramR","_user$currentProgramR2","_ref2","startDate","endDate","renderToString","getToolTip","Date","currentProgramRef","toLocaleDateString","html","CustomModal","ProgramsPage","loading","setLoading","disableAddButton","_response$data","_response$data$profil","get","programsOffered","profileRef","programOfferedRefs","console","log","_updatedPrograms$idx","updatedPrograms","_updatedPrograms$idx2","patch","_error$response","status","ProgramsComponent"],"sourceRoot":""}